{"version":3,"sources":["app/components/pages/editPage/styles/HeaderContactList.module.scss","app/components/pages/editPage/phone/styles/phone.module.scss","app/components/contactList/store/actionTypes/contactListActiontypes.ts","urls/contactsUrls.ts","app/shared/services/requestSenderService/requestSender.ts","app/components/pages/emailPage/store/actionTypes/mailActionTypes.ts","app/components/contactList/requests/contactListRequests.ts","app/components/pages/emailPage/requests/emailRequests.ts","app/components/pages/mainPage/loginForm/store/ActionTypes/loginActionTypes.ts","app/utils/utils.ts","app/components/contactList/store/actionCreators/contactActionCreators.ts","app/components/pages/mainPage/loginForm/store/requests/loginRequests.ts","app/components/pages/searchPage/store/actionTypes/searchContactActionTypes.ts","app/components/pages/mainPage/loginForm/store/actionCreators/loginActionCreators.ts","app/components/pages/searchPage/store/actionCreators/searchContactActionCreators.ts","app/components/pages/addPage/store/actionType/addContactActionTypes.ts","app/components/pages/addPage/requests/addContactRequests.ts","app/components/pages/editPage/store/actionType/updateContactActionTypes.ts","app/components/pages/addPage/store/actionCreators/addContactActionCreator.ts","app/components/pages/editPage/store/requests/updateContactRequests.ts","app/components/pages/deleteModal/store/actionType/deleteContactActionTypes.ts","app/components/pages/editPage/store/actionCreators/updateContactActionCreator.ts","app/components/pages/deleteModal/requests/deleteContactRequests.ts","app/components/pages/deleteModal/store/actionCreators/deleteContactActionCreator.ts","app/components/pages/editPage/phone/store/phoneActionCreator.ts","app/components/pages/emailPage/store/actionCtreators/sendMailActionCreator.ts","app/components/pages/editPage/avatar/store/actionsCreators/avatarActionCreator.ts","app/components/pages/editPage/attachments/store/actionCreators/attachmentActionCreator.ts","app/store/rootActionCreators.ts","app/store/hooks/useActions.ts","app/components/pages/editPage/styles/editContactStyles.ts","app/components/pages/editPage/avatar/styles/avatar.styles.ts","app/components/pages/editPage/avatar/Avatar.tsx","app/components/pages/deleteModal/style/styleModal.ts","app/shared/components/ModalForEditForm.tsx","app/components/pages/editPage/phone/styles/styles.ts","app/components/pages/editPage/phone/EditPhoneForm.tsx","app/shared/components/customMaskInput.tsx","app/components/pages/editPage/phone/AddPhoneForm.tsx","app/components/pages/editPage/styles/formStyles.ts","app/components/pages/editPage/phone/PhoneForm.tsx","app/components/pages/editPage/attachments/styles/attachment.style.ts","app/components/pages/editPage/attachments/AddAttachmentForm.tsx","app/components/pages/editPage/attachments/EditAttachmentForm.tsx","app/components/pages/editPage/attachments/AttachmentsForm.tsx","app/store/hooks/useTypeSelector.ts","app/shared/components/Menu.tsx","app/components/pages/editPage/EditPage.tsx","app/components/pages/addPage/syles/addPage.styles.ts","app/components/pages/addPage/AddPage.tsx","app/components/pages/mainPage/loginForm/loginStyles.ts","app/components/pages/mainPage/loginForm/LoginForm.tsx","app/components/pages/mainPage/MainPage.tsx","app/components/pages/emailPage/styles/emailStyles.ts","app/components/pages/emailPage/messageTemplates.ts","app/components/pages/emailPage/EmailPage.tsx","app/components/pages/deleteModal/DeleteModal.tsx","app/components/pages/searchPage/styles/styles.ts","app/components/pages/searchPage/SearchPage.tsx","assets/img/contactListBG.jpg","app/components/contactList/styles/contactListStyles.ts","app/components/contactList/ContactList.tsx","app/routes/Routes.tsx","app/App.tsx","reportWebVitals.js","app/components/contactList/store/reducers/contactsReducer.ts","app/components/pages/mainPage/loginForm/store/reducers/loginReducer.ts","app/components/pages/searchPage/store/reducers/searchContactReducer.ts","app/components/pages/addPage/store/reducers/addContactReducer.ts","app/components/pages/editPage/store/reducers/updateContactReducer.ts","app/components/pages/deleteModal/store/reducer/deleteContactReducer.ts","app/components/pages/emailPage/store/reducers/sendMailReducer.ts","index.tsx","app/store/configureStore.ts","app/store/rootReducer.ts","app/components/pages/mainPage/mainPage.module.scss"],"names":["module","exports","ContactActionTypes","ContactsUrls","MailActionTypes","RequestSender","url","body","headers","options","method","defaultHeaders","JSON","stringify","fetch","then","response","errorHandler","header","res","getContact","search","a","fullUrl","BASE_URL","GET_CONTACTS_URL","result","json","getContactsBirthday","sendMail","emails","theme","text","SEND_MAIL","LoginActionTypes","formatDate","date","format","moment","Date","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","error","getContacts","dispatch","getState","type","GET_CONTACTS","searchParams","contacts","take","page","ContactListRequests","isSuccess","GET_CONTACTS_SUCCESS","payload","users","data","maxUsers","catch","GET_CONTACTS_FAILURE","errors","mailTo","contactsBirthDay","filter","el","birthDate","contactNameBirthday","map","name","surname","join","length","SendMailRequest","SEND_MAIL_SUCCESS","SEND_MAIL_FAILURE","setPage","SET_CONTACTS_PAGE","setTake","SET_CONTACTS_TAKE","SearchContactActionTypes","login","email","password","GET_LOGIN_URL","getLogin","GET_LOGIN","LoginRequests","user","GET_LOGIN_SUCCESS","GET_LOGIN_FAILURE","logOut","LOGOUT_SUCCESS","CreateContactActionTypes","setSearchParams","SET_SEARCH_PARAMS","UpdateContactActionTypes","addContact","contact","CREATE_CONTACTS_URL","CREATE_CONTACT","ContactRequests","updatedContacts","CREATE_CONTACT_FAILURE","updateContact","UPDATE_CONTACTS_URL","DeleteContactActionTypes","UPDATE_CONTACT","EditRequest","push","PATH","HOME","UPDATE_CONTACT_FAILURE","deleteContact","deletedContacts","DELETE_CONTACTS_URL","deleteAllContact","DELETE_ALL_CONTACTS_URL","deleteContacts","DELETE_CONTACT","DELETE_CONTACT_SUCCESS","DELETE_CONTACT_FAILURE","deleteAll","addPhone","phone","contactId","copyContact","parse","id","phones","editPhone","updatePhone","deletePhone","phoneId","item","saveAvatar","fileBAse64","logo","addAttachment","newAttachment","today","attachments","uploadDate","editAttachment","updateAttachment","updateAttachments","attachment","deleteAttachment","attachmentId","contactsActionCreators","loginActionCreators","searchUserActionCreators","createContactActionCreators","updateContactActionCreators","deleteContactActionCreators","phoneActionCreators","sendMailActionCreator","saveAvatarActionCreator","AttachmentActionCreator","useActions","useDispatch","bindActionCreators","rootActionCreators","useStylesEditPAge","makeStyles","editBG","backgroundPosition","backgroundSize","backgroundRepeat","backgroundColor","container","maxWidth","margin","avatar","position","width","paddingLeft","paddingTop","editForm","display","form","row","flexDirection","justifyContent","title","padding","fontSize","textAlign","color","fontFamily","contactWrapper","wrapperInput","boxShadow","input","contactInfo","flexWrap","dateWrapper","period","buttonWrapper","marginTop","button","prevButton","height","top","left","border","editButton","submitButton","wrapperButtonEditPage","buttonEditForm","useStylesAvatar","wrapper","box","logoLabel","cursor","logoInput","marginBottom","editorWrapper","Logo","setLogo","styles","useState","imagePath","setAvatar","editor","cropperOpen","img","zoom","croppedImg","picture","setPicture","Box","className","htmlFor","Avatar","src","accept","onChange","e","target","files","ref","ed","image","rotate","scale","Slider","value","min","max","step","event","Button","variant","onClick","getImageScaledToCanvas","toDataURL","newLogo","useStylesModal","createStyles","modal","alignItems","paper","palette","background","spacing","modalTitle","marginLeft","marginRight","transform","modalButtonClose","right","ModalForEditForm","props","buttons","open","onClose","classes","Modal","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","IconButton","useStylesAddPhone","EditPhoneForm","setOpen","newPhones","setNewPhones","changePhoneInfoHandler","countryCode","operatorID","phoneNumber","phoneType","comment","Grid","xs","FormControl","FormGroup","TextField","label","defaultValue","updatePhones","TextCountryCode","inputRef","other","inputElement","mask","placeholderChar","showMask","TextOperatorId","TextPhoneNumber","AddPhoneForm","setError","setPhone","React","values","setValues","String","validation","regexCountryCode","regexOperatorID","regexPhoneNumber","test","onBlur","InputProps","inputComponent","useStyles","phoneFormWrapper","phoneTable","formTitle","PhoneForm","columns","field","headerName","filterable","sortable","renderCell","params","hide","flex","editable","headerAlign","changePhoneHandler","deleteCurrentPhone","Delete","selectionModel","setSelectionModel","setTitle","setBody","targetID","currentTarget","currentPhone","find","rows","autoHeight","disableSelectionOnClick","hideFooter","onSelectionModelChange","useStylesAttachment","customUpload","attachmentFileName","attachmentButton","AddAttachmentForm","newAttachments","setNewAttachments","setAttachment","changeAttachmentBase64File","index","lastIndexOf","fileName","substring","ext","base64File","console","log","attachId","EditAttachmentForm","changeAttachmentHandler","AttachmentsForm","href","filePath","download","rel","editAttachmentChangeHandler","deleteCurrentAttachment","currentAttachment","updateNewAttachment","style","useTypeSelector","useSelector","Menu","state","auth","loginClickHandler","exitClickHandler","history","useHistory","AppBar","Toolbar","nav","Typography","navTitle","link","to","EditPage","useLocation","pathname","split","reverse","defaultContact","currentContact","setCurrentContact","selectedDate","setSelectedDate","useEffect","newContact","CircularProgress","preloader","size","changeContactInfoHandler","isDate","replaceStr","replace","changeContactAddressHandler","address","attachmentSubmit","phoneSubmit","includes","contactSubmit","onSubmit","preventDefault","sessionStorage","clear","patronymic","KeyboardButtonProps","gender","maritalStatus","nationality","currentJob","country","city","street","building","flat","zipCode","useStylesAddPage","addPageBG","addPageWrapper","addressWrapper","AddPage","setContactInfo","contactAddress","setContactAddress","setGender","regexRange","InputLabel","Select","labelId","MenuItem","helperText","inputWrapper","errorForm","LoginForm","formik","useFormik","initialValues","validate","resetForm","handleSubmit","getFieldProps","openLoginFormClickHandler","MainPage","openLogin","setOpenLogin","root","footer","footerTitle","emailWrapper","formControl","minWidth","emailFormWrapper","inputStyle","titleTemplate","transition","templateText","select","borderRadius","borderColor","borderBottom","emailButton","messageTemplate","template1","template2","template3","EmailPage","setEmail","contactsId","getItem","template","setTemplate","currentContacts","someArray","otherArray","equalObjects","forEach","i","j","findEqualObjects","valueContact","changeMailHandler","noValidate","autoComplete","multiline","readOnly","required","NativeSelect","inputProps","autoFocus","DeleteModal","useStylesSearchPage","close","textDecoration","errorTitle","searchPanel","searchWrapper","flexBasis","searchTable","delInfoInput","fontWeight","SearchPanel","savedSearch","setSearch","dateFrom","setDateFrom","dateTo","setDateTo","setItem","newDate","onInput","placeholder","pattern","searchClickHandlerClose","useStylesContactList","minHeight","backgroundImage","contactListBG","headerWrapper","contactsForm","deleteButton","searchButton","svg","emailButtonText","ContactList","headerClassName","fullAddress","contactClickHandler","handleOpenModal","items","setItems","openSearch","setOpenSearch","isLoading","isDeleteLoading","delete","prevVal","useRef","current","usePrevious","handleCloseModal","updateFullAddress","updatedData","handlePaginationChange","EDIT","direction","disabled","SearchPage","pageSize","rowCount","loading","paginationMode","rowsPerPageOptions","onPageChange","onPageSizeChange","sortingMode","checkboxSelection","localeText","ruRU","MuiDataGrid","undefined","LOGIN","CREATE","EMAIL","Routes","exact","path","component","App","utils","DateFnsUtils","locale","ru","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","contactsReducer","action","LoginReducer","searchContactReducer","createContactReducer","CREATE_CONTACT_SUCCESS","updateContactReducer","UPDATE_CONTACT_SUCCESS","deleteContactReducer","sendMailReducer","createBrowserHistory","basename","store","middleware","thunk","routerMiddleware","enhancers","windowIfDefined","window","REDUX_DEVTOOLS_EXTENSION","rootReducer","combineReducers","router","connectRouter","createContact","createRootReducer","createStore","composeWithDevTools","applyMiddleware","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a9ed180.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"HeaderContactList_headerWrapper__3_IiF\",\"preloader\":\"HeaderContactList_preloader__DhQy3\",\"deleteButton\":\"HeaderContactList_deleteButton__2EvRw\",\"hideButton\":\"HeaderContactList_hideButton__3nQIN\",\"searchButton\":\"HeaderContactList_searchButton__2ICcr\",\"nameLink\":\"HeaderContactList_nameLink__-diZR\",\"link\":\"HeaderContactList_link__3pyvI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MuiTablePagination-root\":\"phone_MuiTablePagination-root__23TYL\"};","import {ContactInterface} from \"../../types/contact.interface\";\r\n\r\nexport interface ContactListStateInterface {\r\n    isLoading: boolean\r\n    errors: object\r\n    maxUsers: number\r\n    page: number\r\n    take: number\r\n    data: Array<ContactInterface> | null\r\n}\r\n\r\nexport enum ContactActionTypes {\r\n    GET_CONTACTS = '[Contact List] Get Contacts',\r\n    GET_CONTACTS_SUCCESS = '[Contact List] Get Contacts Success',\r\n    GET_CONTACTS_FAILURE = '[Contact List] Get Contacts Failure',\r\n    SET_CONTACTS_PAGE = '[Contact List] Set Contacts Page',\r\n    SET_CONTACTS_TAKE = '[Contact List] Set Contacts Take'\r\n}\r\n\r\ninterface getContacts {\r\n    type: ContactActionTypes.GET_CONTACTS\r\n}\r\n\r\ninterface getContactsSuccess {\r\n    type: ContactActionTypes.GET_CONTACTS_SUCCESS,\r\n    payload: {\r\n        users: Array<ContactInterface>,\r\n        maxUsers: number\r\n    }\r\n}\r\n\r\ninterface getContactsFailure {\r\n    type: ContactActionTypes.GET_CONTACTS_FAILURE,\r\n    errors: {}\r\n}\r\n\r\ninterface setContactPage {\r\n    type: ContactActionTypes.SET_CONTACTS_PAGE,\r\n    page: number\r\n}\r\n\r\ninterface setContactTake {\r\n    type: ContactActionTypes.SET_CONTACTS_TAKE,\r\n    take: number\r\n}\r\n\r\nexport type ContactsActionType = getContacts | getContactsSuccess | getContactsFailure | setContactPage | setContactTake","export enum ContactsUrls  {\r\n    BASE_URL = \"http://localhost:8080/api\",\r\n    GET_CONTACTS_URL = '/contacts',\r\n    CREATE_CONTACTS_URL = '/contacts/create',\r\n    UPDATE_CONTACTS_URL = '/contacts/update',\r\n    DELETE_CONTACTS_URL = '/contacts/delete',\r\n    DELETE_ALL_CONTACTS_URL = '/contacts/deleteAll',\r\n    GET_LOGIN_URL = '/contacts/login',\r\n    SEND_MAIL = '/contacts/sendEmails'\r\n\r\n}\r\n","import {HttpClient} from \"../../types/requestSender\";\r\n\r\nexport const RequestSender: HttpClient = {\r\n    async get(url, headers): Promise<Request> {\r\n        const options: RequestInit = {\r\n            method: 'GET',\r\n            headers: {...defaultHeaders, ...headers}\r\n        }\r\n        return await fetch(url, options)\r\n            .then(response => {\r\n                return errorHandler(response)\r\n            }).catch(err => {\r\n                console.log(err)\r\n                return err\r\n            })\r\n    },\r\n\r\n    async post(url, body, headers): Promise<Request> {\r\n        const options: RequestInit = {\r\n            method: 'POST',\r\n            headers: {...defaultHeaders, ...headers},\r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        return await fetch(url, options)\r\n            .then(response => errorHandler(response))\r\n    },\r\n\r\n    async put(url, body, headers): Promise<Request> {\r\n        const options: RequestInit = {\r\n            method: 'PUT',\r\n            headers: {...defaultHeaders, ...headers},\r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        return await fetch(url, options)\r\n            .then(response => errorHandler(response))\r\n    },\r\n\r\n    async delete(url, body, header): Promise<Request> {\r\n        const options: RequestInit = {\r\n            method: 'DELETE',\r\n            headers: {...defaultHeaders, ...header},\r\n            body: JSON.stringify(body)\r\n        }\r\n\r\n        return await fetch(url, options)\r\n            .then(response => errorHandler(response))\r\n    },\r\n\r\n    async postFormData(url, formData, headers): Promise<Request> {\r\n        const options: any = {\r\n            method: 'PUT',\r\n            headers: {...headers},\r\n            body: formData\r\n        }\r\n\r\n        return await fetch(url, options)\r\n            .then(response => errorHandler(response))\r\n    }\r\n}\r\n\r\nconst errorHandler = (res: any): Promise<Request> => {\r\n    return res\r\n}\r\n\r\nconst defaultHeaders = {\r\n    \"Accept\": \"application/json\",\r\n    \"Content-Type\": \"application/json\"\r\n}","export interface MailStateInterface {\r\n    isDeleteLoading: boolean\r\n    errors: object\r\n}\r\n\r\nexport enum MailActionTypes {\r\n    SEND_MAIL= '[Send mail] Send mail',\r\n    SEND_MAIL_SUCCESS = '[Send mail] Send mail Success',\r\n    SEND_MAIL_FAILURE = '[Send mail] Send mail Failure',\r\n}\r\n\r\ninterface sendMail {\r\n    type: MailActionTypes.SEND_MAIL,\r\n}\r\n\r\ninterface sendMailSuccess {\r\n    type: MailActionTypes.SEND_MAIL_SUCCESS,\r\n}\r\n\r\ninterface sendMailFailure {\r\n    type: MailActionTypes.SEND_MAIL_FAILURE,\r\n    errors: {}\r\n}\r\n\r\nexport type MailActionType = sendMail | sendMailSuccess | sendMailFailure\r\n","import {ContactsUrls} from \"../../../../urls/contactsUrls\";\r\nimport {RequestSender} from \"../../../shared/services/requestSenderService/requestSender\";\r\n\r\nexport const getContact = async (search: any) => {\r\n\r\n    const fullUrl = `${ContactsUrls.BASE_URL}${ContactsUrls.GET_CONTACTS_URL}`\r\n\r\n    const result = await RequestSender.post(fullUrl, search)\r\n\r\n    return result.json()\r\n}\r\n\r\nexport const getContactsBirthday = async () => {\r\n\r\n    const fullUrl = `${ContactsUrls.BASE_URL}${ContactsUrls.GET_CONTACTS_URL}`\r\n\r\n    const result = await RequestSender.post(fullUrl, {})\r\n\r\n    return result.json()\r\n}","import {ContactsUrls} from \"../../../../../urls/contactsUrls\";\r\nimport {RequestSender} from \"../../../../shared/services/requestSenderService/requestSender\";\r\n\r\nexport const sendMail = async (emails: Array<string>, theme: string, text: string) => {\r\n    const BASE_URL = \"http://localhost:8080/api\"\r\n\r\n    const fullUrl = `${BASE_URL}${ContactsUrls.SEND_MAIL}`\r\n\r\n    const result = await RequestSender.post(fullUrl, {emails, theme, text})\r\n\r\n    return result.json()\r\n}\r\n\r\n\r\n","export interface LoginStateInterface {\r\n    isSuccess: boolean\r\n    errors: {}\r\n    data: string\r\n}\r\n\r\nexport enum LoginActionTypes  {\r\n    GET_LOGIN = '[Login Action] Get Login',\r\n    GET_LOGIN_SUCCESS = '[Login Action] Get Login Success',\r\n    GET_LOGIN_FAILURE = '[Login Action] GetLogin Failure',\r\n    LOGOUT_SUCCESS = '[Login Action] Logout Success'\r\n}\r\n\r\ninterface GetLogin {\r\n    type: LoginActionTypes.GET_LOGIN\r\n}\r\n\r\ninterface GetLoginSuccess {\r\n    type: LoginActionTypes.GET_LOGIN_SUCCESS,\r\n    payload: ''\r\n}\r\n\r\ninterface GetLoginFailure {\r\n    type: LoginActionTypes.GET_LOGIN_FAILURE,\r\n    errors: {}\r\n}\r\ninterface LogOutSuccess {\r\n    type: LoginActionTypes.LOGOUT_SUCCESS,\r\n}\r\n\r\n\r\nexport type LoginActionType = GetLogin | GetLoginSuccess | GetLoginFailure | LogOutSuccess\r\n\r\n\r\n\r\n","import moment from 'moment'\r\n\r\nexport const formatDate = (date: any, format: string) => {\r\n    return moment(new Date(date)).format(format)\r\n}\r\n\r\nexport const toBase64 = async (file: File) => {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result)\r\n        reader.onerror = error => reject(error);\r\n    })\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {ContactActionTypes, ContactsActionType} from \"../actionTypes/contactListActiontypes\";\r\nimport {RootState} from \"../../../../store/rootReducer\";\r\nimport {DefaultPagedResponse} from \"../../../../shared/types/defaultPagedResponse\";\r\nimport {ContactInterface} from \"../../types/contact.interface\";\r\nimport * as ContactListRequests from '../../requests/contactListRequests'\r\nimport {LoginActionType} from \"../../../pages/mainPage/loginForm/store/ActionTypes/loginActionTypes\";\r\nimport * as SendMailRequest from \"../../../pages/emailPage/requests/emailRequests\";\r\nimport {CallHistoryMethodAction} from \"connected-react-router\";\r\nimport {MailActionType, MailActionTypes} from \"../../../pages/emailPage/store/actionTypes/mailActionTypes\";\r\nimport {formatDate} from \"../../../../utils/utils\";\r\n\r\nexport const getContacts = () => // передаем то что хотим поменять\r\n    async (dispatch: Dispatch<ContactsActionType>, getState: () => RootState) => { // передаем наш диспатч\r\n        dispatch({type: ContactActionTypes.GET_CONTACTS}) // запускаем крутилку\r\n\r\n        const {searchParams} = getState().search  //получаем парметры из текущего стейта\r\n        const {take, page} = getState().contacts\r\n\r\n        const search = {\r\n            ...searchParams,\r\n            page, take\r\n        }\r\n\r\n        await ContactListRequests.getContact(search)\r\n            .then(async (response: DefaultPagedResponse<Array<ContactInterface>>) => {\r\n                if (response.isSuccess) {\r\n                    dispatch({\r\n                        type: ContactActionTypes.GET_CONTACTS_SUCCESS,\r\n                        payload: {\r\n                            users: response?.data as Array<ContactInterface>,\r\n                            maxUsers: response?.maxUsers\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({type: ContactActionTypes.GET_CONTACTS_FAILURE, errors: error})\r\n            })\r\n    }\r\n\r\nexport const getContactsBirthday = (mailTo: string) =>\r\n    async (dispatch: Dispatch<ContactsActionType | LoginActionType | MailActionType | CallHistoryMethodAction>, getState: () => RootState) => { // передаем наш диспатч\r\n        dispatch({type: ContactActionTypes.GET_CONTACTS})\r\n\r\n        await ContactListRequests.getContactsBirthday()\r\n            .then(async (response: DefaultPagedResponse<Array<ContactInterface>>) => {\r\n\r\n                if (response.isSuccess) {\r\n                    const contacts = response?.data as Array<ContactInterface>\r\n                    let date: any = new Date();\r\n                    const today = formatDate(date, 'DD.MM.yyyy')\r\n                    const testContact = '01.01.2007'\r\n                    const contactsBirthDay = contacts.filter((el: any) => el.birthDate === testContact)\r\n                    const contactNameBirthday = contactsBirthDay.map((el: any) => `${el.name} ${el.surname}`).join(', ')\r\n\r\n                    if(contactsBirthDay.length !== 0) {\r\n                        await SendMailRequest.sendMail([`${mailTo}`], 'Напоминание', `Сегодня День рождения у ${contactNameBirthday}`)\r\n                            .then(async response => {\r\n                                if (response.isSuccess) {\r\n                                    dispatch({type: MailActionTypes.SEND_MAIL_SUCCESS})\r\n                                }\r\n                            })\r\n                            .catch(error => {\r\n                                dispatch({type: MailActionTypes.SEND_MAIL_FAILURE, errors: error})\r\n                            })\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({type: ContactActionTypes.GET_CONTACTS_FAILURE, errors: error})\r\n            })\r\n    }\r\n\r\n\r\nexport const setPage = (page: number) => (dispatch: Dispatch<ContactsActionType>) => {\r\n    dispatch({type: ContactActionTypes.SET_CONTACTS_PAGE, page})\r\n}\r\n\r\nexport const setTake = (take: number) => (dispatch: Dispatch<ContactsActionType>) => {\r\n    dispatch({type: ContactActionTypes.SET_CONTACTS_TAKE, take})\r\n}\r\n","import {ContactsUrls} from \"../../../../../../../urls/contactsUrls\";\r\nimport {RequestSender} from \"../../../../../../shared/services/requestSenderService/requestSender\";\r\n\r\nexport const  login = async (email: string, password: string) => {\r\n\r\n    const fullUrl = `${ContactsUrls.BASE_URL}${ContactsUrls.GET_LOGIN_URL}`\r\n\r\n    const result = await RequestSender.post(fullUrl, {email, password})\r\n\r\n    return result.json()\r\n}\r\n\r\n\r\n\r\n","import {SearchParamsInterface} from \"../../types/searcParams.interface\";\r\n\r\nexport interface SearchUserStateInterface {\r\n    searchParams: SearchParamsInterface\r\n}\r\n\r\nexport enum SearchContactActionTypes {\r\n    SET_SEARCH_PARAMS = '[Search panel] Set Search Params',\r\n}\r\n\r\ninterface setSearchParams {\r\n    type: SearchContactActionTypes.SET_SEARCH_PARAMS,\r\n    payload: SearchParamsInterface\r\n}\r\n\r\nexport type SearchPageActionType = setSearchParams","import {Dispatch} from \"redux\";\r\nimport {LoginActionType, LoginActionTypes} from \"../ActionTypes/loginActionTypes\";\r\nimport {RootState} from \"../../../../../../store/rootReducer\";\r\nimport * as LoginRequests from '../requests/loginRequests'\r\nimport {CallHistoryMethodAction} from \"connected-react-router\";\r\nimport {\r\n    ContactActionTypes,\r\n    ContactsActionType\r\n} from \"../../../../../contactList/store/actionTypes/contactListActiontypes\";\r\nimport * as ContactListRequests from \"../../../../../contactList/requests/contactListRequests\";\r\nimport {DefaultPagedResponse} from \"../../../../../../shared/types/defaultPagedResponse\";\r\nimport {ContactInterface} from \"../../../../../contactList/types/contact.interface\";\r\n\r\n\r\nexport const getLogin = (email: string, password: string) =>\r\n    async (dispatch: Dispatch<LoginActionType | CallHistoryMethodAction>, getState: () => RootState) => {\r\n        dispatch({type: LoginActionTypes.GET_LOGIN})\r\n\r\n        await LoginRequests.login(email, password)\r\n            .then(response => {\r\n                if (response.user.length > 0) {\r\n                    dispatch({type: LoginActionTypes.GET_LOGIN_SUCCESS, payload: response.user})\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({type: LoginActionTypes.GET_LOGIN_FAILURE, errors: error})\r\n            })\r\n    }\r\n\r\nexport const logOut = () =>\r\n    async (dispatch: Dispatch<LoginActionType | ContactsActionType>, getState: () => RootState) => {\r\n        let data = getState().contacts.data\r\n        data = null\r\n        dispatch({type: LoginActionTypes.LOGOUT_SUCCESS})\r\n        const search = {}\r\n        await ContactListRequests.getContact(search)\r\n            .then(async (response: DefaultPagedResponse<Array<ContactInterface>>) => {\r\n                if (response.isSuccess) {\r\n                    dispatch({\r\n                        type: ContactActionTypes.GET_CONTACTS_SUCCESS,\r\n                        payload: {\r\n                            users: data,\r\n                            maxUsers: response?.maxUsers\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({type: ContactActionTypes.GET_CONTACTS_FAILURE, errors: error})\r\n            })\r\n\r\n    }\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {SearchPageActionType, SearchContactActionTypes} from \"../actionTypes/searchContactActionTypes\";\r\nimport {SearchParamsInterface} from \"../../types/searcParams.interface\";\r\n\r\n\r\nexport const setSearchParams = (searchParams: SearchParamsInterface) => (dispatch: Dispatch<SearchPageActionType>) => {\r\n    dispatch({type: SearchContactActionTypes.SET_SEARCH_PARAMS, payload: searchParams})\r\n}","export interface CreateUserStateInterface {\r\n    isLoading: boolean\r\n    errors: object\r\n}\r\n\r\nexport enum CreateContactActionTypes {\r\n    CREATE_CONTACT = '[Create User] Create User',\r\n    CREATE_CONTACT_SUCCESS = '[Create User] Create User Success',\r\n    CREATE_CONTACT_FAILURE = '[Create User] Create User Failure',\r\n}\r\n\r\ninterface createContact {\r\n    type: CreateContactActionTypes.CREATE_CONTACT,\r\n}\r\n\r\ninterface createContactSuccess {\r\n    type: CreateContactActionTypes.CREATE_CONTACT_SUCCESS,\r\n}\r\n\r\ninterface createContactFailure {\r\n    type: CreateContactActionTypes.CREATE_CONTACT_FAILURE,\r\n    errors: {}\r\n}\r\n\r\n\r\nexport type CreateContactActionType = createContact | createContactSuccess | createContactFailure","import {CreateContactInterface} from \"../types/createContactInterface\";\r\nimport {ContactsUrls} from \"../../../../../urls/contactsUrls\";\r\nimport {RequestSender} from \"../../../../shared/services/requestSenderService/requestSender\";\r\n\r\nexport const addContact = async (contact: {contact: CreateContactInterface}) => {\r\n    const BASE_URL = \"http://localhost:8080/api\"\r\n\r\n    const fullUrl = `${BASE_URL}${ContactsUrls.CREATE_CONTACTS_URL}`\r\n\r\n    const result = await RequestSender.post(fullUrl, contact)\r\n\r\n    return result.json()\r\n}","export interface UpdateContactStateInterface {\r\n    isLoading: boolean\r\n    errors: object\r\n}\r\n\r\nexport enum UpdateContactActionTypes {\r\n    UPDATE_CONTACT = '[Update User] Update User',\r\n    UPDATE_CONTACT_SUCCESS = '[Update User] Update User Success',\r\n    UPDATE_CONTACT_FAILURE = '[Update User] Update User Failure',\r\n}\r\n\r\ninterface updateContact {\r\n    type: UpdateContactActionTypes.UPDATE_CONTACT,\r\n}\r\n\r\ninterface updateContactSuccess {\r\n    type: UpdateContactActionTypes.UPDATE_CONTACT_SUCCESS,\r\n}\r\n\r\ninterface updateContactFailure {\r\n    type: UpdateContactActionTypes.UPDATE_CONTACT_FAILURE,\r\n    errors: {}\r\n}\r\n\r\n\r\nexport type UpdateContactActionType = updateContact | updateContactSuccess | updateContactFailure","import {Dispatch} from \"redux\";\r\nimport {CreateContactActionType, CreateContactActionTypes} from \"../actionType/addContactActionTypes\";\r\nimport {ContactActionTypes, ContactsActionType} from \"../../../../contactList/store/actionTypes/contactListActiontypes\";\r\nimport {CreateContactInterface} from \"../../types/createContactInterface\";\r\nimport {RootState} from \"../../../../../store/rootReducer\";\r\nimport * as ContactRequests from \"../../requests/addContactRequests\";\r\nimport * as ContactListRequests from \"../../../../contactList/requests/contactListRequests\";\r\nimport {ContactInterface} from \"../../../../contactList/types/contact.interface\";\r\nimport {CallHistoryMethodAction} from \"connected-react-router\";\r\n\r\n\r\nexport const addContact = (contact: {contact: CreateContactInterface}) =>\r\n    async (dispatch: Dispatch<CreateContactActionType | ContactsActionType | CallHistoryMethodAction>, getState: () => RootState) => {\r\n\r\n        dispatch({type: CreateContactActionTypes.CREATE_CONTACT})\r\n\r\n        await ContactRequests.addContact(contact)\r\n            .then( async response => {\r\n                if(response.isSuccess) {\r\n\r\n                    const updatedContacts = await ContactListRequests.getContact({})\r\n                    dispatch({\r\n                        type: ContactActionTypes.GET_CONTACTS,\r\n                        payload: {\r\n                            users: updatedContacts?.data as Array<ContactInterface>,\r\n                            maxUsers: response?.maxUsers\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({type: CreateContactActionTypes.CREATE_CONTACT_FAILURE, errors: error})\r\n            })\r\n\r\n\r\n    }","import {ContactsUrls} from \"../../../../../../urls/contactsUrls\";\r\nimport {RequestSender} from \"../../../../../shared/services/requestSenderService/requestSender\";\r\nimport {ContactInterface} from \"../../../../contactList/types/contact.interface\";\r\n\r\nexport const updateContact = async (contact: { contact: ContactInterface }) => {\r\n    const BASE_URL = \"http://localhost:8080/api\"\r\n\r\n    const fullUrl = `${BASE_URL}${ContactsUrls.UPDATE_CONTACTS_URL}`\r\n\r\n    const result = await RequestSender.put(fullUrl, contact)\r\n\r\n    return result.json()\r\n}\r\n\r\n\r\n\r\n","export interface DeleteContactStateInterface {\r\n    isDeleteLoading: boolean\r\n    errors: object\r\n}\r\n\r\nexport enum DeleteContactActionTypes {\r\n    DELETE_CONTACT = '[Delete User] Delete User',\r\n    DELETE_CONTACT_SUCCESS = '[Delete User] Delete User Success',\r\n    DELETE_CONTACT_FAILURE = '[Delete User] Delete User Failure',\r\n}\r\n\r\ninterface deleteContact {\r\n    type: DeleteContactActionTypes.DELETE_CONTACT,\r\n}\r\n\r\ninterface deleteContactSuccess {\r\n    type: DeleteContactActionTypes.DELETE_CONTACT_SUCCESS,\r\n}\r\n\r\ninterface deleteContactFailure {\r\n    type: DeleteContactActionTypes.DELETE_CONTACT_FAILURE,\r\n    errors: {}\r\n}\r\n\r\nexport type DeleteContactActionType = deleteContact | deleteContactSuccess | deleteContactFailure","import {Dispatch} from \"redux\";\r\nimport {ContactsActionType} from \"../../../../contactList/store/actionTypes/contactListActiontypes\";\r\nimport {RootState} from \"../../../../../store/rootReducer\";\r\nimport * as EditRequest from \"../requests/updateContactRequests\";\r\nimport {ContactInterface} from \"../../../../contactList/types/contact.interface\";\r\nimport {UpdateContactActionType, UpdateContactActionTypes} from \"../actionType/updateContactActionTypes\";\r\nimport {CallHistoryMethodAction, push} from \"connected-react-router\";\r\nimport {PATH} from \"../../../../../routes/Routes\";\r\n\r\n\r\nexport const updateContact = (contact: { contact: ContactInterface }) =>\r\n    async (dispatch: Dispatch<UpdateContactActionType | ContactsActionType | CallHistoryMethodAction>, getState: () => RootState) => {\r\n        dispatch({type: UpdateContactActionTypes.UPDATE_CONTACT})\r\n        await EditRequest.updateContact(contact)\r\n            .then(async response => {\r\n                if (response.isSuccess) {\r\n                    dispatch(push(PATH.HOME))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({type: UpdateContactActionTypes.UPDATE_CONTACT_FAILURE, errors: error})\r\n            })\r\n    }\r\n","import {ContactsUrls} from \"../../../../../urls/contactsUrls\";\r\nimport {RequestSender} from \"../../../../shared/services/requestSenderService/requestSender\";\r\nimport {GridRowId} from \"@material-ui/data-grid\";\r\n\r\nexport const deleteContact = async (deletedContacts:GridRowId[]) => {\r\n\r\n    const fullUrl = `${ContactsUrls.BASE_URL}${ContactsUrls.DELETE_CONTACTS_URL}`\r\n\r\n    const result = await RequestSender.post(fullUrl, {deletedContacts})\r\n\r\n    return result.json()\r\n}\r\n\r\nexport const deleteAllContact = async () => {\r\n\r\n    const fullUrl = `${ContactsUrls.BASE_URL}${ContactsUrls.DELETE_ALL_CONTACTS_URL}`\r\n\r\n    const result = await RequestSender.delete(fullUrl, {})\r\n\r\n    return result.json()\r\n}","import {Dispatch} from \"redux\";\r\nimport {ContactActionTypes, ContactsActionType} from \"../../../../contactList/store/actionTypes/contactListActiontypes\";\r\nimport {RootState} from \"../../../../../store/rootReducer\";\r\nimport * as ContactListRequests from \"../../../../contactList/requests/contactListRequests\";\r\nimport * as ContactRequests from \"../../../../../components/pages/deleteModal/requests/deleteContactRequests\";\r\nimport {ContactInterface} from \"../../../../contactList/types/contact.interface\";\r\nimport {DeleteContactActionType, DeleteContactActionTypes} from \"../actionType/deleteContactActionTypes\";\r\nimport {GridRowId} from \"@material-ui/data-grid\";\r\n\r\n\r\nexport const deleteContacts = (deletedContacts: GridRowId[]) =>\r\n    async (dispatch: Dispatch<DeleteContactActionType | ContactsActionType>, getState: () => RootState) => {\r\n\r\n        dispatch({type: DeleteContactActionTypes.DELETE_CONTACT})\r\n\r\n        const {searchParams} = getState().search  //получаем парметры из текущего стейта\r\n        const {take, page} = getState().contacts\r\n\r\n        const search = {\r\n            ...searchParams,\r\n            page, take\r\n        }\r\n\r\n        await ContactRequests.deleteContact(deletedContacts)\r\n            .then(async response => {\r\n                if (response.isSuccess) {\r\n                    const updatedContacts = await ContactListRequests.getContact(search)\r\n                    dispatch({type: DeleteContactActionTypes.DELETE_CONTACT_SUCCESS})\r\n                    dispatch({\r\n                        type: ContactActionTypes.GET_CONTACTS_SUCCESS,\r\n                        payload: {\r\n                            users: updatedContacts?.data as Array<ContactInterface>,\r\n                            maxUsers: updatedContacts?.maxUsers\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({type: DeleteContactActionTypes.DELETE_CONTACT_FAILURE, errors: error})\r\n            })\r\n    }\r\n\r\nexport const deleteAll = () => async (dispatch: Dispatch<DeleteContactActionType | ContactsActionType>) => {\r\n    dispatch({type: DeleteContactActionTypes.DELETE_CONTACT})\r\n\r\n    await ContactRequests.deleteAllContact()\r\n        .then(response => {\r\n\r\n            if (response.isSuccess) {\r\n                dispatch({\r\n                    type: ContactActionTypes.GET_CONTACTS_SUCCESS,\r\n                    payload: {\r\n                        users: [] as Array<ContactInterface>,\r\n                        maxUsers: 0\r\n\r\n                    }\r\n                })\r\n                dispatch({type: DeleteContactActionTypes.DELETE_CONTACT_SUCCESS})\r\n            }\r\n        })\r\n}","import {Dispatch} from \"redux\";\r\nimport {ContactActionTypes, ContactsActionType} from \"../../../../contactList/store/actionTypes/contactListActiontypes\";\r\nimport {RootState} from \"../../../../../store/rootReducer\";\r\nimport {ContactInterface, PhoneInterface} from \"../../../../contactList/types/contact.interface\";\r\n\r\n\r\nexport const addPhone = (phone: PhoneInterface, contactId: string) =>\r\n    async (dispatch: Dispatch<ContactsActionType>, getState: () => RootState) => {\r\n        dispatch({type: ContactActionTypes.GET_CONTACTS})\r\n\r\n        const {data, maxUsers} = getState().contacts\r\n\r\n        const updatedContacts = data.map((contact: ContactInterface) => {\r\n            const copyContact = JSON.parse(JSON.stringify(contact))\r\n\r\n            if (copyContact.id === contactId) {\r\n                if (copyContact.phones && copyContact.phones.length > 0) {\r\n                    copyContact.phones.push(phone)\r\n                } else {\r\n                    copyContact.phones = [phone]\r\n                }\r\n                return copyContact\r\n            }\r\n            return contact\r\n        })\r\n\r\n        dispatch({\r\n            type: ContactActionTypes.GET_CONTACTS_SUCCESS,\r\n            payload: {\r\n                users: updatedContacts as Array<ContactInterface>,\r\n                maxUsers: maxUsers\r\n            }\r\n        })\r\n    }\r\n\r\nexport const editPhone = (updatePhone: PhoneInterface, contactId: string) =>\r\n    async (dispatch: Dispatch<ContactsActionType>, getState: () => RootState) => {\r\n        dispatch({type: ContactActionTypes.GET_CONTACTS})\r\n\r\n        const {data, maxUsers} = getState().contacts\r\n\r\n        const updatedContacts = data.map((contact: ContactInterface) => {\r\n            const copyContact = JSON.parse(JSON.stringify(contact))\r\n\r\n            if (copyContact.id === contactId) {\r\n                const phones = copyContact.phones.map((phone: PhoneInterface) => {\r\n                    if (phone.id === updatePhone.id) {\r\n                        return updatePhone;\r\n                    }\r\n                    return phone;\r\n                });\r\n                return {...copyContact, phones: phones}\r\n            }\r\n            return contact\r\n        })\r\n\r\n        dispatch({\r\n            type: ContactActionTypes.GET_CONTACTS_SUCCESS,\r\n            payload: {\r\n                users: updatedContacts as Array<ContactInterface>,\r\n                maxUsers: maxUsers\r\n            }\r\n        })\r\n    }\r\n\r\nexport const deletePhone = (contactId: string, phoneId: string) =>\r\n    async (dispatch: Dispatch<ContactsActionType>, getState: () => RootState) => {\r\n        dispatch({type: ContactActionTypes.GET_CONTACTS})\r\n\r\n        const {data, maxUsers} = getState().contacts\r\n\r\n        const updatedContacts = data.map((contact: ContactInterface) => {\r\n            const copyContact = JSON.parse(JSON.stringify(contact))\r\n\r\n            if (copyContact.id === contactId) {\r\n                copyContact.phones = copyContact.phones.filter((item: PhoneInterface) => item.id !== phoneId)\r\n                return copyContact\r\n            }\r\n            return contact\r\n        })\r\n\r\n        dispatch({\r\n            type: ContactActionTypes.GET_CONTACTS_SUCCESS,\r\n            payload: {\r\n                users: updatedContacts as Array<ContactInterface>,\r\n                maxUsers: maxUsers\r\n            }\r\n        })\r\n    }","import {Dispatch} from \"redux\";\r\n\r\nimport * as SendMailRequest from '../../requests/emailRequests'\r\nimport {RootState} from \"../../../../../store/rootReducer\";\r\nimport {MailActionType, MailActionTypes} from \"../actionTypes/mailActionTypes\";\r\nimport {CallHistoryMethodAction, push} from \"connected-react-router\";\r\nimport {PATH} from \"../../../../../routes/Routes\";\r\n\r\nexport const sendMail = (emails: Array<string>, theme: string, text: string) =>\r\n    async (dispatch: Dispatch<MailActionType | CallHistoryMethodAction>, getState: () => RootState) => {\r\n        dispatch({type: MailActionTypes.SEND_MAIL})\r\n\r\n        await SendMailRequest.sendMail(emails, theme, text)\r\n            .then(async response => {\r\n                if (response.isSuccess) {\r\n                    dispatch(push(PATH.HOME))\r\n                }\r\n            })\r\n            .catch(error=> {dispatch({type: MailActionTypes.SEND_MAIL_FAILURE, errors: error})})\r\n    }\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {\r\n    ContactActionTypes,\r\n    ContactsActionType\r\n} from \"../../../../../contactList/store/actionTypes/contactListActiontypes\";\r\nimport {RootState} from \"../../../../../../store/rootReducer\";\r\nimport {ContactInterface} from \"../../../../../contactList/types/contact.interface\";\r\n\r\n\r\nexport const saveAvatar = (name: string, fileBAse64: string, contactId: string) =>\r\n    async (dispatch: Dispatch<ContactsActionType>, getState: () => RootState) => {\r\n        dispatch({type: ContactActionTypes.GET_CONTACTS})\r\n\r\n        const {data, maxUsers} = getState().contacts\r\n\r\n        const updatedContacts = data.map((contact: ContactInterface) => {\r\n            const copyContact = JSON.parse(JSON.stringify(contact))\r\n\r\n            if (copyContact.id === contactId) {\r\n                copyContact.logo = {name: name, file: fileBAse64}\r\n            }\r\n            if (!contactId) {\r\n                contact.logo = {name: name, file: fileBAse64}\r\n            }\r\n            return copyContact\r\n        })\r\n\r\n        dispatch({\r\n            type: ContactActionTypes.GET_CONTACTS_SUCCESS,\r\n            payload: {\r\n                users: updatedContacts as Array<ContactInterface>,\r\n                maxUsers: maxUsers\r\n            }\r\n        })\r\n    }","import {AttachmentInterface, ContactInterface} from \"../../../../../contactList/types/contact.interface\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootState} from \"../../../../../../store/rootReducer\";\r\nimport {\r\n    ContactActionTypes,\r\n    ContactsActionType\r\n} from \"../../../../../contactList/store/actionTypes/contactListActiontypes\";\r\nimport {formatDate} from \"../../../../../../utils/utils\";\r\n\r\nexport const addAttachment = (newAttachment: AttachmentInterface, contactId: string) =>\r\n    async (dispatch: Dispatch<ContactsActionType>, getState: () => RootState) => {\r\n        dispatch({type: ContactActionTypes.GET_CONTACTS})\r\n\r\n        const {data, maxUsers} = getState().contacts\r\n\r\n        const updatedContacts = data.map((contact: ContactInterface) => {\r\n            const copyContact = JSON.parse(JSON.stringify(contact))\r\n            let date: any = new Date();\r\n            const today = formatDate(date, 'DD.MM.yyyy')\r\n\r\n            if (copyContact.id === contactId) {\r\n                if (copyContact.attachments && copyContact.attachments.length > 0) {\r\n                    copyContact.attachments.push({...newAttachment, uploadDate: today})\r\n                } else {\r\n                    copyContact.attachments = [{...newAttachment, uploadDate: today}]\r\n                }\r\n                return copyContact\r\n            }\r\n            return contact\r\n        })\r\n\r\n        dispatch({\r\n            type: ContactActionTypes.GET_CONTACTS_SUCCESS,\r\n            payload: {\r\n                users: updatedContacts as Array<ContactInterface>,\r\n                maxUsers: maxUsers\r\n            }\r\n        })\r\n    }\r\n\r\nexport const editAttachment = (updateAttachment: AttachmentInterface, contactId: string) =>\r\n    async (dispatch: Dispatch<ContactsActionType>, getState: () => RootState) => {\r\n        dispatch({type: ContactActionTypes.GET_CONTACTS})\r\n\r\n        const {data, maxUsers} = getState().contacts\r\n\r\n        const updatedContacts = data.map((contact: ContactInterface) => {\r\n            const copyContact = JSON.parse(JSON.stringify(contact))\r\n\r\n            if (copyContact.id === contactId) {\r\n                const updateAttachments = copyContact.attachments.map((attachment: AttachmentInterface) => {\r\n                    if (attachment.id === updateAttachment.id) {\r\n                        return updateAttachment;\r\n                    }\r\n                    return attachment;\r\n                });\r\n                return {...copyContact, attachments: updateAttachments}\r\n            }\r\n            return contact\r\n        })\r\n\r\n        dispatch({\r\n            type: ContactActionTypes.GET_CONTACTS_SUCCESS,\r\n            payload: {\r\n                users: updatedContacts as Array<ContactInterface>,\r\n                maxUsers: maxUsers\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const deleteAttachment = (contactId: string, attachmentId: string) =>\r\n    async (dispatch: Dispatch<ContactsActionType>, getState: () => RootState) => {\r\n        dispatch({type: ContactActionTypes.GET_CONTACTS})\r\n\r\n        const {data, maxUsers} = getState().contacts\r\n\r\n        const updatedContacts = data.map((contact: ContactInterface) => {\r\n            const copyContact = JSON.parse(JSON.stringify(contact))\r\n\r\n            if (copyContact.id === contactId) {\r\n                copyContact.attachments = copyContact.attachments.filter((item: AttachmentInterface) => item.id !== attachmentId)\r\n                return copyContact\r\n            }\r\n            return contact\r\n        })\r\n\r\n        dispatch({\r\n            type: ContactActionTypes.GET_CONTACTS_SUCCESS,\r\n            payload: {\r\n                users: updatedContacts as Array<ContactInterface>,\r\n                maxUsers: maxUsers\r\n            }\r\n        })\r\n    }\r\n","import * as contactsActionCreators from '../components/contactList/store/actionCreators/contactActionCreators'\r\nimport * as loginActionCreators from '../components/pages/mainPage/loginForm/store/actionCreators/loginActionCreators'\r\nimport * as searchUserActionCreators from '../components/pages/searchPage/store/actionCreators/searchContactActionCreators'\r\nimport * as createContactActionCreators from '../components/pages/addPage/store/actionCreators/addContactActionCreator'\r\nimport * as updateContactActionCreators from '../components/pages/editPage/store/actionCreators/updateContactActionCreator'\r\nimport * as deleteContactActionCreators from '../components/pages/deleteModal/store/actionCreators/deleteContactActionCreator'\r\nimport * as phoneActionCreators from '../components/pages/editPage/phone/store/phoneActionCreator'\r\nimport * as sendMailActionCreator from '../components/pages/emailPage/store/actionCtreators/sendMailActionCreator'\r\nimport * as saveAvatarActionCreator from '../components/pages/editPage/avatar/store/actionsCreators/avatarActionCreator'\r\nimport * as AttachmentActionCreator from '../components/pages/editPage/attachments/store/actionCreators/attachmentActionCreator'\r\n\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default  {\r\n    ...contactsActionCreators,\r\n    ...loginActionCreators,\r\n    ...searchUserActionCreators,\r\n    ...createContactActionCreators,\r\n    ...updateContactActionCreators,\r\n    ...deleteContactActionCreators,\r\n    ...phoneActionCreators,\r\n    ...sendMailActionCreator,\r\n    ...saveAvatarActionCreator,\r\n    ...AttachmentActionCreator,\r\n\r\n}\r\n","import {useDispatch} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport rootActionCreators from \"../rootActionCreators\";\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    return bindActionCreators(rootActionCreators, dispatch)\r\n}","import {makeStyles} from \"@material-ui/core\";\r\n\r\nexport const useStylesEditPAge = makeStyles({\r\n    editBG: {\r\n        backgroundPosition: 'center',\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundColor: \"whitesmoke\"\r\n    },\r\n\r\n    container: {\r\n        maxWidth: 1200,\r\n        margin: '0 auto',\r\n    },\r\n    avatar: {\r\n        position: 'relative',\r\n        width: 220,\r\n        paddingLeft:20,\r\n        paddingTop: 60\r\n\r\n    },\r\n\r\n    editForm: {\r\n        display: \"flex\",\r\n\r\n    },\r\n    form: {\r\n        width: '100%'\r\n    },\r\n    row: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\"\r\n    },\r\n    title: {\r\n        padding: 20,\r\n        fontSize: 28,\r\n        textAlign: \"center\",\r\n        color: \"#3451b9\",\r\n        fontFamily: 'Sans-Serif',\r\n    },\r\n    contactWrapper:{\r\n\r\n    },\r\n    wrapperInput: {\r\n        padding: '10px 0',\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        boxShadow: 'rgba(149, 157, 165, 0.2) 0px 8px 24px',\r\n        // box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;\r\n    },\r\n    input: {\r\n        margin: '0 10px 10px',\r\n    },\r\n    contactInfo: {\r\n        display: \"flex\",\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around'\r\n\r\n    },\r\n    dateWrapper: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        flexDirection: \"column\"\r\n    },\r\n    date: {\r\n        margin: '0 10px 10px 10px',\r\n        width: 195\r\n    },\r\n    period: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        flexWrap: \"wrap\"\r\n    },\r\n    buttonWrapper: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-around\",\r\n        marginTop: 20\r\n    },\r\n    button: {\r\n        padding: 0\r\n    },\r\n    prevButton: {\r\n        width: 50,\r\n        height: 50,\r\n        position: \"relative\",\r\n        top: 20,\r\n        left: 10,\r\n        border: '1px solid black',\r\n\r\n\r\n    },\r\n    editButton: {padding: 10, margin: 20},\r\n\r\n    submitButton: {\r\n        position: \"relative\",\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        marginTop: 0\r\n    },\r\n    wrapperButtonEditPage: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\"\r\n    },\r\n    buttonEditForm: {\r\n        margin: 20\r\n    },\r\n})\r\n","import {makeStyles} from \"@material-ui/styles\";\r\n\r\nexport const useStylesAvatar = makeStyles({\r\n    wrapper: {\r\n        paddingTop: 10,\r\n        paddingLeft: 10,\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    box: {\r\n        width:\"500%\"\r\n    },\r\n    logoLabel:{\r\n        cursor: 'pointer',\r\n    },\r\n    logoInput: {\r\n      display: 'none',\r\n    },\r\n     avatar: {\r\n         width: 200,\r\n         height: 200,\r\n         padding: \"10\",\r\n         marginBottom: 10\r\n     },\r\n    button: {\r\n        backgroundColor: \"#3451b9\",\r\n        color: \"white\",\r\n        marginBottom:20\r\n    },\r\n    editorWrapper: {\r\n        display: 'block'\r\n    }\r\n    })\r\n;","import React, {ChangeEvent, Dispatch, useState} from 'react';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport AvatarEditor from \"react-avatar-editor\";\r\nimport {Box, Slider} from \"@material-ui/core\";\r\nimport {ContactInterface} from \"../../../contactList/types/contact.interface\";\r\nimport {useActions} from \"../../../../store/hooks/useActions\";\r\nimport {useStylesAvatar} from \"./styles/avatar.styles\";\r\n\r\ntype AvatarPropsType = {\r\n    contact: ContactInterface\r\n    setLogo?: Dispatch<React.SetStateAction<{}>>\r\n}\r\nconst Logo = ({contact, setLogo}: AvatarPropsType) => {\r\n    const styles = useStylesAvatar();\r\n    const {saveAvatar} = useActions()\r\n    const [avatar, setAvatar] = useState<string>(contact.imagePath)\r\n\r\n    let editor = \"\";\r\n    const [picture, setPicture] = useState({\r\n        cropperOpen: false,\r\n        img: null,\r\n        zoom: 1,\r\n        croppedImg:\r\n            \"https://upload.wikimedia.org/wikipedia/commons/0/09/Man_Silhouette.png\"\r\n    });\r\n\r\n    const handleSlider = (event: ChangeEvent<{}>, value: any) => {\r\n        setPicture({\r\n            ...picture,\r\n            zoom: value\r\n        });\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setPicture({\r\n            ...picture,\r\n            cropperOpen: false\r\n        });\r\n    };\r\n\r\n    const setEditorRef = (ed: any) => {\r\n        editor = ed;\r\n    };\r\n\r\n    const handleSave = () => {\r\n\r\n        // @ts-ignore\r\n        const canvasScaled = editor.getImageScaledToCanvas();\r\n        const croppedImg = canvasScaled.toDataURL();\r\n\r\n        setPicture({\r\n            ...picture,\r\n            img: null,\r\n            cropperOpen: false,\r\n            croppedImg: croppedImg\r\n        });\r\n        setAvatar(croppedImg)\r\n\r\n\r\n        if (contact.id) {\r\n            // @ts-ignore\r\n            saveAvatar(picture.img.name, croppedImg, contact.id)\r\n        } else {\r\n            // @ts-ignore\r\n            const newLogo = {name: picture.img.name, file: croppedImg}\r\n            if (setLogo) {\r\n                setLogo(newLogo)\r\n            }\r\n        }\r\n\r\n    };\r\n    const handleFileChange = (e: any) => {\r\n        setPicture({\r\n            ...picture,\r\n            img: e.target.files![0],\r\n            cropperOpen: true\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Box className={styles.wrapper}>\r\n                <Box className={styles.box}>\r\n                    <label htmlFor=\"logoCheck\" className={styles.logoLabel}>\r\n                        <Avatar\r\n                            className={styles.avatar}\r\n                            src={avatar}\r\n                        />\r\n                    </label>\r\n                    <input className={styles.logoInput} type=\"file\" accept=\"image/*\" id={'logoCheck'}\r\n                           onChange={handleFileChange}/>\r\n\r\n                </Box>\r\n\r\n                {picture.cropperOpen && (\r\n                    <Box\r\n                        className={styles.editorWrapper}\r\n                    >\r\n                        <AvatarEditor\r\n                            ref={setEditorRef}\r\n                            image={picture.img!}\r\n                            width={200}\r\n                            height={200}\r\n                            border={5}\r\n                            color={[255, 255, 255, 0.6]}\r\n                            rotate={0}\r\n                            scale={picture.zoom}\r\n                        />\r\n                        <Slider\r\n                            aria-label=\"raceSlider\"\r\n                            value={picture.zoom}\r\n                            min={1}\r\n                            max={10}\r\n                            step={0.1}\r\n                            onChange={handleSlider}\r\n                        />\r\n                        <Box>\r\n                            <Button variant=\"contained\" onClick={handleCancel}>\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={handleSave}>Save</Button>\r\n                        </Box>\r\n                    </Box>\r\n                )}\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport const useStylesModal = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        modal: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        },\r\n        paper: {\r\n            position: 'relative',\r\n            width: 'auto',\r\n            backgroundColor: theme.palette.background.paper,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            padding: theme.spacing(2, 4, 3),\r\n        },\r\n\r\n        modalTitle:{\r\n            padding: 20,\r\n            fontSize: 22,\r\n            textAlign: 'center',\r\n            fontFamily: 'Sans-Serif',\r\n        },\r\n        wrapperInput: {\r\n            padding: '10px 0',\r\n        },\r\n        input: {\r\n            marginLeft: 10,\r\n            marginRight: 10\r\n        },\r\n        button: {\r\n            position: \"relative\",\r\n            left: '50%',\r\n            marginRight: '-50%',\r\n            transform: 'translate(-50%, 50%)',\r\n            margin: '80px 0 20px 0',\r\n        },\r\n        modalButtonClose: {\r\n            position: \"absolute\",\r\n            backgroundColor: 'rgba(255,255,255,0)',\r\n            top: 0,\r\n            right: 0,\r\n        },\r\n\r\n    }),\r\n);\r\n","import React from 'react';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport {useStylesModal} from \"../../components/pages/deleteModal/style/styleModal\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {GridCloseIcon} from \"@material-ui/data-grid\";\r\n\r\ninterface PhoneEditModalType  {\r\n    open: boolean,\r\n    onClose: () => void,\r\n\r\n    title: string\r\n    body: JSX.Element\r\n    buttons: JSX.Element\r\n}\r\n\r\nexport const ModalForEditForm = (props: PhoneEditModalType) => {\r\n    let {title, body, buttons, open, onClose} = props\r\n    const classes = useStylesModal();\r\n\r\n    return (\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={onClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <div className={classes.paper}>\r\n                        <IconButton\r\n                            className={classes.modalButtonClose}\r\n                            onClick={onClose}\r\n                            aria-label=\"close\">\r\n                            <GridCloseIcon/>\r\n                        </IconButton>\r\n                        <h2 className={classes.modalTitle} id=\"transition-modal-title\">{title}</h2>\r\n                        {body}\r\n                        {buttons}\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n    );\r\n}\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport const useStylesAddPhone = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n\r\n        error: {\r\n            fontSize: 14,\r\n            height: 16,\r\n            color: 'red',\r\n            position: 'relative',\r\n            left: 10\r\n        },\r\n        wrapperInput: {\r\n            padding: '10px 0',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexDirection: 'column'\r\n        },\r\n        input: {\r\n            marginLeft: 10,\r\n            marginRight: 10\r\n        },\r\n        button: {\r\n            position: \"relative\",\r\n            left: '50%',\r\n            marginRight: '-50%',\r\n            transform: 'translate(-50%, 50%)',\r\n            margin: '80px 0 20px 0',\r\n        },\r\n    }),\r\n);\r\n","import React, {ChangeEvent} from 'react';\r\nimport {Button, FormControl, FormGroup, Grid, TextField} from \"@material-ui/core\";\r\nimport {useStylesAddPhone} from \"../phone/styles/styles\";\r\nimport {ContactInterface, PhoneInterface} from \"../../../contactList/types/contact.interface\";\r\nimport {useActions} from \"../../../../store/hooks/useActions\";\r\n\r\ninterface EditPhoneFormInterface {\r\n    setOpen: Function\r\n    phone: PhoneInterface\r\n    contact: ContactInterface\r\n    newPhones?: Array<PhoneInterface>\r\n    setNewPhones?: Function\r\n}\r\n\r\nexport const EditPhoneForm = (props: EditPhoneFormInterface) => {\r\n\r\n    const classes = useStylesAddPhone();\r\n    const {editPhone} = useActions()\r\n    let {phone, setOpen, contact, newPhones, setNewPhones} = props\r\n\r\n    const changePhoneInfoHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const {name, value} = event.target\r\n\r\n        if (name === 'countryCode') {\r\n            phone.countryCode = value\r\n        }\r\n        if (name === 'operatorID') {\r\n            phone.operatorID = value\r\n        }\r\n        if (name === 'phoneNumber') {\r\n            phone.phoneNumber = value\r\n        }\r\n        if (name === 'phoneType') {\r\n            phone.phoneType = value\r\n        }\r\n        if (name === 'comment') {\r\n            phone.comment = value\r\n        }\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        if(contact.id) {\r\n            editPhone(phone, contact.id)\r\n            setOpen(false)\r\n        } else {\r\n            const updatePhones = newPhones!.map((item) => {\r\n                if (item.id === phone.id) {\r\n                    return phone\r\n                }\r\n                return item\r\n\r\n            })\r\n            setOpen(false)\r\n            return setNewPhones!(updatePhones)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid container justifyContent=\"center\">\r\n                <Grid item xs={10}>\r\n                    <form>\r\n                        <FormControl>\r\n                            <FormGroup>\r\n                                <div className={classes.wrapperInput}>\r\n                                    <TextField className={classes.input}\r\n                                               label=\"Код станы\"\r\n                                               name={\"countryCode\"}\r\n                                               type=\"search\"\r\n                                               onChange={changePhoneInfoHandler}\r\n                                               defaultValue={phone.countryCode ? phone.countryCode : ''}\r\n                                    />\r\n                                    <TextField className={classes.input}\r\n                                               label=\"Код оператора\"\r\n                                               name={\"operatorID\"}\r\n                                               type=\"search\"\r\n                                               onChange={changePhoneInfoHandler}\r\n                                               defaultValue={phone.operatorID ? phone.operatorID : ''}\r\n                                    />\r\n                                    <TextField className={classes.input}\r\n                                               label=\"Телефонный номер\"\r\n                                               name={\"phoneNumber\"}\r\n                                               type=\"search\"\r\n                                               onChange={changePhoneInfoHandler}\r\n                                               defaultValue={phone.phoneNumber ? phone.phoneNumber : ''}\r\n                                    />\r\n                                    <TextField className={classes.input}\r\n                                               label=\"Описание\"\r\n                                               name={\"phoneType\"}\r\n                                               type=\"search\"\r\n                                               onChange={changePhoneInfoHandler}\r\n                                               defaultValue={phone.phoneType ? phone.phoneType : ''}\r\n                                    />\r\n                                    <TextField className={classes.input}\r\n                                               label=\"Коментарий\"\r\n                                               name={\"comment\"}\r\n                                               type=\"search\"\r\n                                               onChange={changePhoneInfoHandler}\r\n                                               defaultValue={phone.comment ? phone.comment : ''}\r\n                                    />\r\n                                </div>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                    <div>\r\n                        <Button\r\n                            className={classes.button}\r\n                            variant={'contained'}\r\n                            onClick={onSubmit}\r\n                            color={'primary'}\r\n                        >Сохранить изменения</Button>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n","import MaskedInput from 'react-text-mask'\r\n\r\nexport interface PhoneValidationState {\r\n    countryCode: string,\r\n    operatorID: string,\r\n    phoneNumber: string\r\n}\r\n\r\ninterface TextMaskCustomProps {\r\n    inputRef: (ref: HTMLInputElement | null) => void;\r\n}\r\n\r\n// mask={['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\r\nexport function TextCountryCode(props: TextMaskCustomProps) {\r\n    const {inputRef, ...other} = props;\r\n\r\n    return (\r\n        <MaskedInput\r\n            {...other}\r\n            ref={(ref: any) => {\r\n                inputRef(ref ? ref.inputElement : null);\r\n            }}\r\n            mask={['+',/\\d/, /\\d/, /\\d/,]}\r\n            placeholderChar={'\\u2000'}\r\n            showMask\r\n        />\r\n    );\r\n}\r\nexport function TextOperatorId(props: TextMaskCustomProps) {\r\n    const {inputRef, ...other} = props;\r\n\r\n    return (\r\n        <MaskedInput\r\n            {...other}\r\n            ref={(ref: any) => {\r\n                inputRef(ref ? ref.inputElement : null);\r\n            }}\r\n            mask={[/\\d/, /\\d/]}\r\n            placeholderChar={'\\u2000'}\r\n            showMask\r\n        />\r\n    );\r\n}\r\n\r\nexport function TextPhoneNumber(props: TextMaskCustomProps) {\r\n    const {inputRef, ...other} = props;\r\n\r\n    return (\r\n        <MaskedInput\r\n            {...other}\r\n            ref={(ref: any) => {\r\n                inputRef(ref ? ref.inputElement : null);\r\n            }}\r\n            mask={[/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]}\r\n            placeholderChar={'\\u2000'}\r\n            showMask\r\n        />\r\n    );\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {Button, FormControl, FormGroup, Grid, TextField} from \"@material-ui/core\";\r\nimport {ContactInterface, PhoneInterface} from \"../../../contactList/types/contact.interface\";\r\nimport {useStylesAddPhone} from \"./styles/styles\";\r\nimport {useActions} from \"../../../../store/hooks/useActions\";\r\nimport {\r\n    PhoneValidationState,\r\n    TextCountryCode,\r\n    TextOperatorId,\r\n    TextPhoneNumber\r\n} from \"../../../../shared/components/customMaskInput\";\r\n\r\ninterface AddPhoneFormInterface {\r\n    setOpen: Function\r\n    contact: ContactInterface\r\n    setNewPhones?: Function\r\n    newPhones?: Array<PhoneInterface>\r\n}\r\n\r\nexport const AddPhoneForm = (props: AddPhoneFormInterface) => {\r\n\r\n    const classes = useStylesAddPhone();\r\n    let {setOpen, contact, setNewPhones, newPhones} = props\r\n    const [errors, setError] = useState({\r\n        countryCode: '',\r\n        operatorID: '',\r\n        phoneNumber: '',\r\n    })\r\n    const {addPhone} = useActions()\r\n    const [phone, setPhone] = useState({} as PhoneInterface)\r\n    const [values, setValues] = React.useState<PhoneValidationState>({\r\n        countryCode: '+',\r\n        operatorID: '',\r\n        phoneNumber: '',\r\n    });\r\n\r\n    const changePhoneInfoHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const phoneId = contact.phones ? contact.phones.length + 1 : newPhones?.length! + 1\r\n        const {name, value} = event.target\r\n        const updatePhone = {...phone, [name]: value, id: `phone${String(phoneId)}`}\r\n        setValues({\r\n            ...values,\r\n            [event.target.name]: event.target.value,\r\n        });\r\n        setPhone(updatePhone)\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        if (!contact.id) {\r\n            setNewPhones!([...newPhones!, phone])\r\n        } else addPhone(phone, contact.id)\r\n        setOpen(false)\r\n    }\r\n\r\n    const validation = (event: React.FocusEvent<HTMLInputElement>) => {\r\n        const target = event.target\r\n        const regexCountryCode = /^(\\+?\\d{1,3}|\\d{1,4})$/;\r\n        const regexOperatorID = /^[0-9]{2}$/;\r\n        const regexPhoneNumber = /^[0-9]{7}$/;\r\n        if (target.name === 'countryCode') {\r\n            if (!regexCountryCode.test(target.value)) {\r\n                setError({...errors, countryCode: 'Поле запонено неверно'})\r\n            } else if (regexCountryCode.test(target.value)) {\r\n                setError({...errors, countryCode: ''})\r\n            }\r\n        }\r\n        if (target.name === 'operatorID') {\r\n            if (!regexOperatorID.test(target.value)) {\r\n                setError({...errors, operatorID: 'Поле запонено неверно'})\r\n            } else if (regexOperatorID.test(target.value)) {\r\n                setError({...errors, operatorID: ''})\r\n            }\r\n        }\r\n        if (target.name === 'phoneNumber') {\r\n            if (!regexPhoneNumber.test(target.value)) {\r\n                setError({...errors, phoneNumber: 'Поле запонено неверно'})\r\n            } else if (regexPhoneNumber.test(target.value)) {\r\n                setError({...errors, phoneNumber: ''})\r\n            }\r\n        }\r\n        return errors\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid container justifyContent=\"center\">\r\n                <Grid item xs={10}>\r\n                    <form>\r\n                        <FormControl>\r\n                            <FormGroup>\r\n                                <div className={classes.wrapperInput}>\r\n                                    <TextField className={classes.input}\r\n                                               title={'Код в формате +ХХХ'}\r\n                                               label=\"Код станы\"\r\n                                               name={\"countryCode\"}\r\n                                               type=\"search\"\r\n                                               value={values.countryCode}\r\n                                               onBlur={validation}\r\n                                               onChange={changePhoneInfoHandler}\r\n                                               InputProps={{\r\n                                                   inputComponent: TextCountryCode as any,\r\n                                               }}\r\n                                    />\r\n                                    {errors.countryCode ?\r\n                                        <div className={classes.error}>{errors.countryCode}</div> : null}\r\n\r\n                                    <TextField className={classes.input}\r\n                                               title={'Код в формате ХХ'}\r\n                                               label=\"Код оператора\"\r\n                                               name={\"operatorID\"}\r\n                                               type=\"search\"\r\n                                               value={values.operatorID}\r\n                                               onBlur={validation}\r\n                                               onChange={changePhoneInfoHandler}\r\n                                               InputProps={{\r\n                                                   inputComponent: TextOperatorId as any,\r\n                                               }}\r\n                                    />\r\n                                    {errors.operatorID ?\r\n                                        <div className={classes.error}>{errors.operatorID}</div> : null}\r\n\r\n                                    <TextField className={classes.input}\r\n                                               title={'Номера в формате ХХХХХХХ'}\r\n                                               label=\"Телефонный номер\"\r\n                                               name={\"phoneNumber\"}\r\n                                               type=\"search\"\r\n                                               value={values.phoneNumber}\r\n                                               onBlur={validation}\r\n                                               onChange={changePhoneInfoHandler}\r\n                                               InputProps={{\r\n                                                   inputComponent: TextPhoneNumber as any,\r\n                                               }}\r\n                                    />\r\n                                    {errors.phoneNumber ?\r\n                                        <div className={classes.error}>{errors.phoneNumber}</div> : null}\r\n\r\n                                    <TextField className={classes.input}\r\n                                               label=\"Тип\"\r\n                                               name={\"phoneType\"}\r\n                                               type=\"search\"\r\n                                               onChange={changePhoneInfoHandler}\r\n                                    />\r\n                                    <TextField className={classes.input}\r\n                                               label=\"Коментарий\"\r\n                                               name={\"comment\"}\r\n                                               type=\"search\"\r\n                                               onChange={changePhoneInfoHandler}\r\n                                    />\r\n                                </div>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                    <div>\r\n                        <Button\r\n                            className={classes.button}\r\n                            variant={'contained'}\r\n                            onClick={onSubmit}\r\n                            color={'primary'}\r\n                        >Сохранить изменения</Button>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n\r\n    );\r\n};\r\n","import {makeStyles} from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles({\r\n    phoneFormWrapper:{\r\n        height: 'auto',\r\n        width: '100%',\r\n    },\r\n    phoneTable: {\r\n        boxShadow: 'rgba(149, 157, 165, 0.2) 0px 8px 24px',\r\n    },\r\n\r\n    button: {\r\n        margin: '10px 0'\r\n    },\r\n    formTitle: {\r\n        fontSize: 28,\r\n        padding: 20,\r\n        textAlign: \"center\",\r\n        color: \"#3451b9\",\r\n        fontFamily: 'Sans-Serif',\r\n    }\r\n})","import React, {SyntheticEvent, useState} from 'react';\r\nimport {DataGrid, GridCellParams, GridColDef, GridRowId} from \"@material-ui/data-grid\";\r\nimport './styles/phone.module.scss'\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {ContactInterface, PhoneInterface} from \"../../../contactList/types/contact.interface\";\r\nimport {ModalForEditForm} from \"../../../../shared/components/ModalForEditForm\";\r\nimport {EditPhoneForm} from \"./EditPhoneForm\";\r\nimport {AddPhoneForm} from \"./AddPhoneForm\";\r\nimport {useActions} from \"../../../../store/hooks/useActions\";\r\nimport {useStyles} from \"../styles/formStyles\";\r\n\r\ninterface PhoneFormProps {\r\n    contact: ContactInterface\r\n    setNewPhones?: Function\r\n    newPhones?: Array<PhoneInterface>\r\n}\r\n\r\nconst PhoneForm = (props: PhoneFormProps) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const columns: GridColDef[] = [\r\n        {\r\n            field: 'phone', headerName: 'Телефонный номер', width: 200, filterable: false, sortable: false,\r\n            renderCell: (params: GridCellParams) => {\r\n                return <span>{`${params.row.countryCode} ${params.row.operatorID} ${params.row.phoneNumber}`}</span>\r\n            }\r\n        },\r\n        {field: 'countryCode', headerName: 'Код страны', width: 200, filterable: false, sortable: false, hide: true},\r\n        {field: 'operatorID', headerName: 'Код оператора', width: 200, filterable: false, sortable: false, hide: true},\r\n        {\r\n            field: 'phoneNumber',\r\n            headerName: 'телефонный номер',\r\n            width: 200,\r\n            filterable: false,\r\n            sortable: false,\r\n            hide: true\r\n        },\r\n        {field: 'phoneType', headerName: 'Описание', width: 160, filterable: false, sortable: false},\r\n        {field: 'comment', headerName: 'Коментарий', width: 160, filterable: false, sortable: false, flex: 1},\r\n        {\r\n            field: 'Редактировать', headerName: '', width: 155, filterable: false, sortable: false, editable: true,headerAlign: 'center',\r\n            renderCell: (el) => {\r\n                return <IconButton\r\n                    id={String(el.id)}\r\n                    aria-label=\"edit\"\r\n                    onClick={changePhoneHandler}\r\n                >\r\n                    <EditIcon/>\r\n                </IconButton>\r\n            }\r\n        },\r\n        {\r\n            field: 'Удалить', headerName: '', width: 110, filterable: false, sortable: false,headerAlign: 'center',\r\n            renderCell: (el) =>\r\n                <IconButton\r\n                    aria-label=\"del\"\r\n                    id={String(el.id)}\r\n                    onClick={deleteCurrentPhone}\r\n                >\r\n                    <Delete/>\r\n                </IconButton>\r\n        },\r\n    ]\r\n\r\n    const {contact, setNewPhones,newPhones} = props\r\n    let phones = contact.phones\r\n\r\n    const {deletePhone} = useActions()\r\n    const [open, setOpen] = useState(false);\r\n    // const [phone, setPhone] = useState({} as PhoneInterface); //edit phone\r\n    const [selectionModel, setSelectionModel] = useState<GridRowId[]>([]);\r\n    const [title, setTitle] = useState<string>('');\r\n    const [body, setBody] = useState<JSX.Element>(<div/>);\r\n    const [buttons] = useState<JSX.Element>(<div/>);\r\n    const handleCloseModal = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n// EDIT PHONE HANDLER\r\n    const changePhoneHandler = (event: SyntheticEvent) => {\r\n        const targetID = event.currentTarget.id\r\n        setTitle('Редактирование номера телефона');\r\n        setOpen(true);\r\n        // setPhone(currentPhone)\r\n        if(contact.id) {\r\n            const currentPhone = contact.phones.find(target => target.id === targetID)!;\r\n            setBody(<EditPhoneForm phone={currentPhone} setOpen={setOpen} contact={contact}/>)\r\n        } else {\r\n            const currentPhone = newPhones!.find(target => target.id === targetID)!;\r\n            setBody(<EditPhoneForm phone={currentPhone} setOpen={setOpen} contact={contact} newPhones={newPhones} setNewPhones={setNewPhones}/>)\r\n\r\n        }\r\n    }\r\n\r\n  // ADD PHONE HANDLER\r\n    const addPhoneChangeHandler = (event: SyntheticEvent) => {\r\n        setTitle('Добавить номер телефона');\r\n        setBody(<AddPhoneForm setOpen={setOpen} contact={contact} setNewPhones={setNewPhones} newPhones={newPhones}/>)\r\n        setOpen(true);\r\n    }\r\n\r\n    const checkedCurrenPhone = (params: GridRowId[]) => {\r\n        setSelectionModel(params)\r\n    }\r\n\r\n    const deleteCurrentPhone = (event: SyntheticEvent) => {\r\n        const phoneId = event.currentTarget.id\r\n        const contactId = contact.id\r\n        if(!contact.id) {\r\n            setNewPhones!(newPhones?.filter(item=> item.id !== phoneId))\r\n        } else deletePhone(contactId, phoneId)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.phoneFormWrapper}>\r\n            <h2 className={classes.formTitle}>Контактные телефоны</h2>\r\n            <Button\r\n                className={classes.button}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={addPhoneChangeHandler}\r\n            >\r\n                Добавить новый номер\r\n            </Button>\r\n            <DataGrid\r\n                className={classes.phoneTable}\r\n                rows={phones! || newPhones}\r\n                columns={columns}\r\n                autoHeight\r\n                disableSelectionOnClick\r\n                hideFooter\r\n                onSelectionModelChange={checkedCurrenPhone}\r\n                selectionModel={selectionModel}\r\n            />\r\n\r\n            <ModalForEditForm\r\n                open={open}\r\n                onClose={handleCloseModal}\r\n                title={title}\r\n                body={body}\r\n                buttons={buttons}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PhoneForm;","import {makeStyles} from \"@material-ui/core\";\r\n\r\nexport const useStylesAttachment = makeStyles({\r\n\r\n    wrapperInput: {\r\n        padding: '10px 0',\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\"\r\n    },\r\n    customUpload:{\r\n        display: \"flex\",\r\n        alignItems: 'center'\r\n    },\r\n    attachmentFileName:{\r\n        paddingLeft: 10,\r\n    },\r\n\r\n    attachmentButton:{\r\n        marginLeft: 10,\r\n        marginRight: 10,\r\n        backgroundColor: \"#3f51b5\",\r\n        display: \"none\"\r\n    },\r\n\r\n    input: {\r\n        marginLeft: 10,\r\n        marginRight: 10\r\n    },\r\n    editButton: {\r\n        position: \"relative\",\r\n        left: '50%',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, 50%)',\r\n        margin: '40px 0 20px 0',\r\n    },\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {Button, FormControl, FormGroup, Grid, TextField} from \"@material-ui/core\";\r\nimport {AttachmentInterface, ContactInterface} from \"../../../contactList/types/contact.interface\";\r\nimport {useActions} from \"../../../../store/hooks/useActions\";\r\nimport {formatDate, toBase64} from \"../../../../utils/utils\";\r\nimport {useStylesAttachment} from \"./styles/attachment.style\";\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\n\r\ninterface AddAttachmentFormInterface {\r\n    setOpen: Function\r\n    contact: ContactInterface\r\n    setNewAttachments?: Function\r\n    newAttachments?: Array<AttachmentInterface>\r\n}\r\n\r\nexport const AddAttachmentForm = (props: AddAttachmentFormInterface) => {\r\n    const styles = useStylesAttachment();\r\n    let {setOpen, contact, newAttachments, setNewAttachments} = props\r\n\r\n    const {addAttachment} = useActions()\r\n    const [attachment, setAttachment] = useState<AttachmentInterface>({} as AttachmentInterface)\r\n\r\n    const changeAttachmentBase64File = async (event: ChangeEvent<HTMLInputElement>) => {\r\n        const file = event.target.files![0]\r\n        const index = file.name.lastIndexOf('.')\r\n        const fileName = file.name.substring(0, index)\r\n        const ext = file.name.substring(index, file.name.length)\r\n\r\n        const base64File: any = await toBase64(file)\r\n        const newAttachment = {...attachment, base64File, fileName, ext}\r\n        setAttachment(newAttachment)\r\n    }\r\n\r\n    const changeAttachmentInfoHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const attachId = contact.attachments ? contact.attachments.length + 1 : newAttachments?.length! + 1\r\n        const {name, value} = event.target\r\n        const newAttachment = {...attachment, [name]: value, id: String(attachId)}\r\n        setAttachment(newAttachment)\r\n    }\r\n    console.log(attachment)\r\n    const onSubmit = () => {\r\n        if (!contact.id) {\r\n            let date: any = new Date();\r\n            const today = formatDate(date, 'DD.MM.yyyy')\r\n            setNewAttachments!([...newAttachments!, {...attachment, uploadDate: today}])\r\n        } else addAttachment(attachment, contact.id)\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid container justifyContent=\"center\">\r\n                <Grid item xs={10}>\r\n                    <form>\r\n                        <FormControl>\r\n                            <FormGroup>\r\n                                <div className={styles.wrapperInput }>\r\n                                    <label htmlFor=\"file-upload\" className={styles.customUpload}>\r\n                                        <div>\r\n                                            <CloudUploadIcon/>\r\n                                        </div>\r\n                                        <div className={styles.attachmentFileName}>\r\n                                            <span>{attachment.fileName! ? `Имя файла: ${attachment.fileName}` : 'Загрузить файл'}</span>\r\n                                        </div>\r\n                                    </label>\r\n                                    <input\r\n                                        className={styles.attachmentButton}\r\n                                        name={'fileName'}\r\n                                        id=\"file-upload\"\r\n                                        type=\"file\"\r\n                                        onChange={changeAttachmentBase64File}\r\n                                    />\r\n                                    <TextField className={styles.input}\r\n                                               label=\"Коментарий\"\r\n                                               name={\"comment\"}\r\n                                               type=\"search\"\r\n                                               onChange={changeAttachmentInfoHandler}\r\n                                    />\r\n                                </div>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                    <div>\r\n                        <Button\r\n                            className={styles.editButton}\r\n                            variant={'contained'}\r\n                            onClick={onSubmit}\r\n                            color={'primary'}\r\n                        >Сохранить изменения</Button>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n\r\n    );\r\n};\r\n","import React, {ChangeEvent} from 'react';\r\nimport {Button, FormControl, FormGroup, Grid, TextField} from \"@material-ui/core\";\r\nimport {AttachmentInterface, ContactInterface} from \"../../../contactList/types/contact.interface\";\r\nimport {useStylesAttachment} from \"./styles/attachment.style\";\r\nimport {useActions} from \"../../../../store/hooks/useActions\";\r\n\r\ninterface EditAttachmentFormInterface {\r\n    setOpen: Function\r\n    contact: ContactInterface\r\n    attachment: AttachmentInterface\r\n    setNewAttachments?: Function\r\n    newAttachments?: Array<AttachmentInterface>\r\n}\r\n\r\nexport const EditAttachmentForm = (props: EditAttachmentFormInterface) => {\r\n    const styles = useStylesAttachment();\r\n    const {editAttachment} = useActions()\r\n    let {setOpen, attachment, contact, setNewAttachments, newAttachments} = props\r\n\r\n    const changeAttachmentHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const {name, value} = event.target\r\n        if (name === 'fileName') {\r\n            attachment.fileName = value\r\n        }\r\n        if (name === 'comment') {\r\n            attachment.comment = value\r\n        }\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        if (contact.id) {\r\n            editAttachment(attachment, contact.id)\r\n            setOpen(false)\r\n        } else {\r\n            const updateAttachments = newAttachments!.map((item) => {\r\n                if (item.id === attachment.id) {\r\n                    return attachment\r\n                }\r\n                return item\r\n\r\n            })\r\n            setOpen(false)\r\n            return setNewAttachments!(updateAttachments)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid container justifyContent=\"center\">\r\n                <Grid item xs={10}>\r\n                    <form>\r\n                        <FormControl>\r\n                            <FormGroup>\r\n                                <div className={styles.wrapperInput}>\r\n                                    <TextField className={styles.input}\r\n                                               label=\"Имя файла\"\r\n                                               name={\"fileName\"}\r\n                                               type=\"search\"\r\n                                               onChange={changeAttachmentHandler}\r\n                                               defaultValue={attachment.fileName ? attachment.fileName : ''}\r\n                                    />\r\n\r\n                                    <TextField className={styles.input}\r\n                                               label=\"Коментарий\"\r\n                                               name={\"comment\"}\r\n                                               type=\"search\"\r\n                                               onChange={changeAttachmentHandler}\r\n                                               defaultValue={attachment.comment ? attachment.comment : ''}\r\n                                    />\r\n                                </div>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                    <div>\r\n                        <Button\r\n                            className={styles.editButton}\r\n                            variant={'contained'}\r\n                            onClick={onSubmit}\r\n                            color={'primary'}\r\n                        >Сохранить изменения</Button>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n\r\n    );\r\n};","import React, {SyntheticEvent, useState} from 'react';\r\nimport {DataGrid, GridColDef, GridRowId} from \"@material-ui/data-grid\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {AttachmentInterface, ContactInterface} from \"../../../contactList/types/contact.interface\";\r\nimport {ModalForEditForm} from \"../../../../shared/components/ModalForEditForm\";\r\nimport {AddAttachmentForm} from \"./AddAttachmentForm\";\r\nimport {EditAttachmentForm} from \"./EditAttachmentForm\";\r\nimport {useActions} from \"../../../../store/hooks/useActions\";\r\nimport {useStyles} from \"../styles/formStyles\";\r\n\r\ntype AttachmentsPropsType = {\r\n    contact: ContactInterface\r\n    setNewAttachments?: Function\r\n    newAttachments?: Array<AttachmentInterface>\r\n}\r\n\r\nconst AttachmentsForm = (props: AttachmentsPropsType) => {\r\n    const classes = useStyles()\r\n    let {contact, newAttachments, setNewAttachments} = props\r\n\r\n    const columns: GridColDef[] = [\r\n        {field: 'fileName', headerName: 'Имя файла', width: 200, filterable: false, sortable: false,\r\n            renderCell: (el) => {\r\n                return <a href={el.row.filePath}\r\n                          download\r\n                          target=\"_blank\" rel=\"noopener noreferrer\">{el.value}</a>\r\n            }},\r\n        {field: 'uploadDate', headerName: 'Дата загрузки', width: 160, filterable: false, sortable: false},\r\n        {field: 'comment', headerName: 'Коментарий', width: 160, filterable: false, sortable: false, flex: 1},\r\n        {\r\n            field: 'Редактировать', headerName: '', width: 155, filterable: false, sortable: false, editable: true,headerAlign: 'center',\r\n            renderCell: (el) => {\r\n                return <IconButton\r\n                    id={String(el.id)}\r\n                    aria-label=\"edit\"\r\n                    onClick={editAttachmentChangeHandler}\r\n                >\r\n                    <EditIcon/>\r\n                </IconButton>\r\n            }\r\n        },\r\n        {\r\n            field: 'Удалить', headerName: '', width: 110, filterable: false, sortable: false,headerAlign: 'center',\r\n            renderCell: (el) =>\r\n                <IconButton\r\n                    id={String(el.id)}\r\n                    aria-label=\"del\"\r\n                    onClick={deleteCurrentAttachment}\r\n                >\r\n                    <Delete/>\r\n                </IconButton>\r\n        },\r\n    ]\r\n    const {deleteAttachment} = useActions()\r\n    const [open, setOpen] = useState(false);\r\n    const [selectionModel, setSelectionModel] = useState<GridRowId[]>([]);\r\n    const [title, setTitle] = useState<string>('');\r\n    const [body, setBody] = useState<JSX.Element>(<div/>);\r\n    const [buttons] = useState<JSX.Element>(<div/>);\r\n\r\n    // ADD ATTACHMENT\r\n    const addAttachmentChangeHandler = () => {\r\n        setTitle('Добавить вложения');\r\n        setBody(<AddAttachmentForm setOpen={setOpen} contact={contact} newAttachments={newAttachments} setNewAttachments={setNewAttachments}/>)\r\n        setOpen(true);\r\n    }\r\n    //EDIT ATTACHMENT\r\n    const editAttachmentChangeHandler = (event: SyntheticEvent) => {\r\n        setTitle('Редактирование вложений');\r\n        setOpen(true);\r\n        const targetID = event.currentTarget.id\r\n\r\n        if(contact.id){\r\n            const currentAttachment = contact.attachments.find(target =>target.id === targetID )!;\r\n            setBody(<EditAttachmentForm setOpen={setOpen} contact={contact} attachment={currentAttachment}/>)\r\n        } else {\r\n            const updateNewAttachment = newAttachments!.find(target => target.id === targetID)!;\r\n            setBody(<EditAttachmentForm setOpen={setOpen} contact={contact} attachment={updateNewAttachment} setNewAttachments={setNewAttachments} newAttachments={newAttachments}/>)\r\n\r\n        }\r\n\r\n    }\r\n    //DELETE ATTACHMENT\r\n    const deleteCurrentAttachment = (event: SyntheticEvent) => {\r\n        const targetID = event.currentTarget.id\r\n        if(!contact.id) {\r\n            setNewAttachments!(newAttachments?.filter(item=> item.id !== targetID))\r\n        } else deleteAttachment(contact.id, targetID)\r\n    }\r\n\r\n    const checkedCurrenAttachment = (params: GridRowId[]) => {\r\n        setSelectionModel(params)\r\n    }\r\n\r\n    const handleCloseModal = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div style={{width: '100%', marginBottom: 10, marginTop: 15}}>\r\n            <h2 className={classes.formTitle}>Вложения</h2>\r\n            <Button\r\n                className={classes.button}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={addAttachmentChangeHandler}\r\n            >\r\n                Добавить вложение\r\n            </Button>\r\n\r\n            <DataGrid\r\n                className={classes.phoneTable}\r\n                rows={contact.attachments! || newAttachments}\r\n                columns={columns}\r\n                autoHeight\r\n                disableSelectionOnClick\r\n                hideFooter\r\n                onSelectionModelChange={checkedCurrenAttachment}\r\n                selectionModel={selectionModel}\r\n            />\r\n            <ModalForEditForm\r\n                open={open}\r\n                onClose={handleCloseModal}\r\n                title={title}\r\n                body={body}\r\n                buttons={buttons}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AttachmentsForm;\r\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../rootReducer\";\r\n\r\nexport const useTypeSelector: TypedUseSelectorHook<RootState> = useSelector","import React, {SyntheticEvent} from 'react';\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport style from \"../../components/pages/mainPage/mainPage.module.scss\";\r\nimport {NavLink, useHistory} from \"react-router-dom\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport {useTypeSelector} from \"../../store/hooks/useTypeSelector\";\r\n\r\ntype MenuPropsType = {\r\n    loginClickHandler?: (event: SyntheticEvent) => void\r\n    auth: string\r\n    exitClickHandler?: () => void\r\n}\r\n\r\nconst Menu = (props: MenuPropsType) => {\r\n\r\n    const data = useTypeSelector(state => state.contacts.data)\r\n    const {auth, loginClickHandler, exitClickHandler} = props\r\n    const history = useHistory()\r\n\r\n    return (\r\n        <AppBar position=\"relative\">\r\n            <Toolbar className={style.nav}>\r\n\r\n                <Typography className={style.navTitle} variant=\"h6\" onClick={event => {\r\n                    if (!data) {\r\n                        loginClickHandler!(event)\r\n                    } else history.push('/contacts')\r\n                }\r\n                }>\r\n                    Contact Book\r\n                </Typography>\r\n\r\n                <Button\r\n                    color=\"inherit\"\r\n                    onClick={loginClickHandler || exitClickHandler}\r\n                >\r\n                    {auth === 'Login' ? auth : <NavLink className={style.link} to={'/'}>{auth}</NavLink>}\r\n                </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nexport default Menu;","import React, {ChangeEvent, FormEvent, useEffect, useState} from 'react';\r\nimport {Button, CircularProgress, FormControl, FormGroup, Grid, IconButton, TextField} from \"@material-ui/core\";\r\nimport {useActions} from \"../../../store/hooks/useActions\";\r\nimport {useStylesEditPAge} from \"./styles/editContactStyles\";\r\nimport {TargetType} from \"../searchPage/SearchPage\";\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\nimport Avatar from \"./avatar/Avatar\";\r\nimport PhoneForm from \"./phone/PhoneForm\";\r\nimport AttachmentsForm from \"./attachments/AttachmentsForm\";\r\nimport {LocationType} from \"./type/editPage.type\";\r\nimport {AttachmentInterface, ContactInterface} from \"../../contactList/types/contact.interface\";\r\nimport {useTypeSelector} from \"../../../store/hooks/useTypeSelector\";\r\nimport {RootState} from \"../../../store/rootReducer\";\r\nimport styles from \"./styles/HeaderContactList.module.scss\";\r\nimport Menu from \"../../../shared/components/Menu\";\r\nimport {PATH} from \"../../../routes/Routes\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport {KeyboardDatePicker} from \"@material-ui/pickers\";\r\nimport {formatDate} from \"../../../utils/utils\";\r\n\r\nconst EditPage = () => {\r\n    const history = useHistory()\r\n    const classes = useStylesEditPAge()\r\n    const {updateContact, getContacts, logOut} = useActions()\r\n    const contacts: ContactInterface[] = useTypeSelector((state: RootState) => state.contacts.data)\r\n    const location = useLocation<LocationType>()\r\n    const contactId = location.pathname.split('/').reverse()[0]\r\n    const defaultContact = contacts?.find(el => el.id === contactId)!\r\n    let [currentContact, setCurrentContact] = useState<ContactInterface>(defaultContact)\r\n    const [selectedDate, setSelectedDate] = React.useState<Date | null>(\r\n        new Date(formatDate(currentContact.birthDate, 'DD.MM.yyyy')),\r\n    );\r\n\r\n    useEffect(() => {\r\n        const newContact: ContactInterface = contacts?.find(el => el.id === contactId)!\r\n        setCurrentContact(newContact)\r\n        if (!contacts) {\r\n            getContacts()\r\n        }\r\n    }, [contacts])\r\n\r\n    if (!contacts || !currentContact) {\r\n        return <CircularProgress\r\n            className={styles.preloader}\r\n            size={60}\r\n            color=\"secondary\"\r\n        />\r\n    }\r\n\r\n    const changeContactInfoHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const target: TargetType = (event.target)\r\n        const isDate = target.name === 'birthDate'\r\n        const replaceStr = event.target.value.replace(/-/g, ' ').split(' ').reverse().join('.')\r\n        if (currentContact) {\r\n            const contact = {...currentContact, [target.name]: isDate ? replaceStr : target.value}\r\n            setCurrentContact(contact)\r\n        }\r\n    }\r\n\r\n\r\n    const handleDateChange = (date: Date | null) => {\r\n        setSelectedDate(date);\r\n    };\r\n    const changeContactAddressHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const target: TargetType = (event.target)\r\n\r\n        const address = {\r\n            ...currentContact,\r\n            address: {...currentContact.address, id: currentContact.address.id, [target.name]: target.value}\r\n        }\r\n        setCurrentContact(address)\r\n    }\r\n\r\n    const exitClickHandler = () => {\r\n        logOut()\r\n    }\r\n\r\n    let copyContact = JSON.parse(JSON.stringify(currentContact))\r\n    const attachmentSubmit = copyContact.attachments.map((el: AttachmentInterface) => {\r\n        if (el.base64File) {\r\n\r\n            return {\r\n                comment: el.comment,\r\n                filePath: el.base64File,\r\n                uploadDate: el.uploadDate,\r\n                fileName: el.fileName,\r\n                ext: el.ext\r\n            }\r\n        }\r\n\r\n        return el\r\n    })\r\n\r\n    const phoneSubmit = copyContact.phones.map((el: any) => {\r\n        if (el.id.includes('phone')) {\r\n            return {\r\n                comment: el.comment,\r\n                countryCode: el.countryCode,\r\n                operatorID: el.operatorID,\r\n                phoneNumber: el.phoneNumber,\r\n                phoneType: el.phoneType\r\n            }\r\n        }\r\n        return el\r\n    })\r\n    const birthDate = formatDate(selectedDate, 'DD.MM.yyyy')\r\n    const contactSubmit = {\r\n        ...copyContact,\r\n        phones: phoneSubmit,\r\n        attachments: attachmentSubmit,\r\n        birthDate: birthDate\r\n\r\n    }\r\n    const onSubmit = (event: FormEvent) => {\r\n        event.preventDefault()\r\n        updateContact({contact: contactSubmit})\r\n        sessionStorage.clear()\r\n    }\r\n    return (\r\n        <div className={classes.editBG}>\r\n            <Menu auth={'Выйти'} exitClickHandler={exitClickHandler}/>\r\n            <div className={classes.container}>\r\n                <div className={classes.editForm}>\r\n                    <IconButton className={classes.prevButton}\r\n                                onClick={() => history.push(PATH.HOME)}\r\n                                aria-label=\"close\">\r\n                        <ArrowBackIcon/>\r\n                    </IconButton>\r\n                    <div className={classes.avatar}><Avatar contact={currentContact}/></div>\r\n                    <div>\r\n                        <h2 className={classes.title}>Редактирование контакта </h2>\r\n                        <Grid container justifyContent=\"center\">\r\n                            <Grid item xs={10}>\r\n                                <form onSubmit={onSubmit}>\r\n                                    <FormControl>\r\n                                        <FormGroup>\r\n                                            <div className={classes.wrapperInput}>\r\n                                                <div className={classes.contactInfo}>\r\n                                                    <TextField className={classes.input}\r\n                                                               label=\"Имя\"\r\n                                                               name={\"name\"}\r\n                                                               type=\"search\"\r\n                                                               onChange={changeContactInfoHandler}\r\n                                                               defaultValue={currentContact.name ? currentContact.name : ''}\r\n                                                    />\r\n                                                    <TextField className={classes.input}\r\n                                                               label=\"Фамилия\"\r\n                                                               name={\"surname\"}\r\n                                                               type=\"search\"\r\n                                                               onChange={changeContactInfoHandler}\r\n                                                               defaultValue={currentContact.surname ? currentContact.surname : ''}\r\n                                                    />\r\n                                                    <TextField className={classes.input}\r\n                                                               label=\"Отчество\"\r\n                                                               name={\"patronymic\"}\r\n                                                               type=\"search\"\r\n                                                               onChange={changeContactInfoHandler}\r\n                                                               defaultValue={currentContact.patronymic ? currentContact.patronymic : ''}\r\n                                                    />\r\n                                                    <KeyboardDatePicker\r\n                                                        className={classes.date}\r\n                                                        margin=\"normal\"\r\n                                                        id=\"date-picker-dialog\"\r\n                                                        format=\"dd.MM.yyyy\"\r\n                                                        label=\"Дата рождения\"\r\n                                                        value={selectedDate}\r\n                                                        onChange={handleDateChange}\r\n                                                        KeyboardButtonProps={{\r\n                                                            'aria-label': 'change date',\r\n                                                        }}\r\n                                                        error={false}\r\n                                                    />\r\n                                                    <TextField className={classes.input}\r\n                                                               label=\"Пол\"\r\n                                                               name={\"gender\"}\r\n                                                               type=\"search\"\r\n                                                               onChange={changeContactInfoHandler}\r\n                                                               defaultValue={currentContact.gender ? currentContact.gender : ''}\r\n                                                    />\r\n                                                    <TextField className={classes.input}\r\n                                                               label=\"Семейное положение\"\r\n                                                               name={\"maritalStatus\"}\r\n                                                               type=\"search\"\r\n                                                               onChange={changeContactInfoHandler}\r\n                                                               defaultValue={currentContact.maritalStatus ? currentContact.maritalStatus : ''}\r\n                                                    />\r\n                                                    <TextField className={classes.input}\r\n                                                               label=\"Гражданство\"\r\n                                                               name={\"nationality\"}\r\n                                                               type=\"search\"\r\n                                                               onChange={changeContactInfoHandler}\r\n                                                               defaultValue={currentContact.nationality ? currentContact.nationality : ''}\r\n                                                    />\r\n                                                    <TextField className={classes.input}\r\n                                                               label=\"Email\"\r\n                                                               name={\"email\"}\r\n                                                               type=\"search\"\r\n                                                               onChange={changeContactInfoHandler}\r\n                                                               defaultValue={currentContact.email ? currentContact.email : ''}\r\n                                                    />\r\n                                                    <TextField className={classes.input}\r\n                                                               label=\"Место работы\"\r\n                                                               name={\"currentJob\"}\r\n                                                               type=\"search\"\r\n                                                               onChange={changeContactInfoHandler}\r\n                                                               defaultValue={currentContact.currentJob ? currentContact.currentJob : ''}\r\n                                                    />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <h3 className={classes.title}>Адрес</h3>\r\n                                                    <br/>\r\n                                                    <div className={classes.contactInfo}>\r\n                                                        <TextField className={classes.input}\r\n                                                                   label=\"Страна\"\r\n                                                                   name={\"country\"}\r\n                                                                   type=\"search\"\r\n                                                                   onChange={changeContactAddressHandler}\r\n                                                                   defaultValue={currentContact.address?.country ? currentContact.address?.country : ''}\r\n                                                        />\r\n                                                        <TextField className={classes.input}\r\n                                                                   label=\"Город\"\r\n                                                                   name={\"city\"}\r\n                                                                   type=\"search\"\r\n                                                                   onChange={changeContactAddressHandler}\r\n                                                                   defaultValue={currentContact.address?.city ? currentContact.address?.city : ''}\r\n                                                        />\r\n                                                        <TextField className={classes.input}\r\n                                                                   label=\"Улица\"\r\n                                                                   name={\"street\"}\r\n                                                                   type=\"search\"\r\n                                                                   onChange={changeContactAddressHandler}\r\n                                                                   defaultValue={currentContact.address?.street ? currentContact.address?.street : ''}\r\n                                                        />\r\n                                                        <TextField className={classes.input}\r\n                                                                   label=\"Номер дома\"\r\n                                                                   name={\"building\"}\r\n                                                                   type=\"number\"\r\n                                                                   onChange={changeContactAddressHandler}\r\n                                                                   defaultValue={currentContact.address?.building ? currentContact.address?.building : ''}\r\n                                                        />\r\n                                                        <TextField className={classes.input}\r\n                                                                   label=\"Номер квартиры\"\r\n                                                                   name={\"flat\"}\r\n                                                                   type=\"number\"\r\n                                                                   onChange={changeContactAddressHandler}\r\n                                                                   defaultValue={currentContact.address?.flat ? currentContact.address?.flat : ''}\r\n                                                        />\r\n                                                        <TextField className={classes.input}\r\n                                                                   label=\"Индекс\"\r\n                                                                   name={\"zipCode\"}\r\n                                                                   type=\"number\"\r\n                                                                   onChange={changeContactAddressHandler}\r\n                                                                   defaultValue={currentContact.address?.zipCode ? currentContact.address?.zipCode : ''}\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <PhoneForm contact={currentContact}/>\r\n                                            <AttachmentsForm contact={currentContact}/>\r\n\r\n                                            <div className={classes.submitButton}>\r\n                                                <Button\r\n                                                    className={classes.editButton}\r\n                                                    type={'submit'}\r\n                                                    variant={'contained'}\r\n                                                    color={'primary'}\r\n                                                >Сохранить изменения</Button>\r\n                                            </div>\r\n                                        </FormGroup>\r\n                                    </FormControl>\r\n                                </form>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default EditPage;\r\n","import {makeStyles} from \"@material-ui/core\";\r\nimport addFormBG from \"../../../../../assets/img/addFormBG.jpg\";\r\n\r\nexport const useStylesAddPage = makeStyles({\r\n    error: {\r\n        fontSize: 14,\r\n        height: 16,\r\n        color: 'red',\r\n        position: 'relative',\r\n        top: -8,\r\n        left: 10\r\n    },\r\n    avatar: {\r\n        width: 300,\r\n        paddingLeft:20,\r\n        paddingTop: 65\r\n    },\r\n\r\n    addPageBG:{\r\n        backgroundColor: \"whitesmoke\",\r\n        backgroundPosition: 'center',\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'repeat-y',\r\n    },\r\n    container: {\r\n        maxWidth: 1200,\r\n        margin: '0 auto',\r\n        display: 'flex',\r\n    },\r\n\r\n    addPageWrapper: {\r\n        height: '100%',\r\n        width: '100%',\r\n        marginBottom: 30,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        padding: 15,\r\n        boxShadow: 'rgba(149, 157, 165, 0.2) 0px 8px 24px',\r\n    },\r\n    row: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\"\r\n    },\r\n    title: {\r\n        padding: 20,\r\n        fontSize: 28,\r\n        textAlign: \"center\",\r\n        color: \"#3451b9\",\r\n        fontFamily: 'Sans-Serif',\r\n    },\r\n\r\n    input: {\r\n        margin: '0 10px 10px',\r\n        width: 200\r\n    },\r\n    gender: {width: 200, margin: '0 10px 10px'},\r\n\r\n    dateWrapper: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        flexDirection: \"column\"\r\n    },\r\n    date: {\r\n        margin: '0 10px 10px 10px',\r\n        width: 195\r\n    },\r\n    period: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        flexWrap: \"wrap\"\r\n    },\r\n    addressWrapper:{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        flexWrap: \"wrap\"\r\n    },\r\n    buttonWrapper: {\r\n        display: \"flex\",\r\n        justifyContent: \"flex-end\",\r\n        marginTop: 20\r\n    },\r\n\r\n    prevButton: {\r\n        width: 50,\r\n        height: 50,\r\n        position: \"relative\",\r\n        top: 20,\r\n        left: 10,\r\n        border: '1px solid black',\r\n    },\r\n    editButton: {padding: 10, margin: 20},\r\n\r\n    submitButton: {\r\n        position: \"relative\",\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        margin: 80\r\n    },\r\n})\r\n","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport 'date-fns';\r\nimport {\r\n    Button,\r\n    FormControl,\r\n    FormGroup,\r\n    Grid,\r\n    IconButton,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport {useActions} from \"../../../store/hooks/useActions\";\r\nimport {TargetType} from \"../searchPage/SearchPage\";\r\nimport {useStylesAddPage} from \"./syles/addPage.styles\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {PATH} from \"../../../routes/Routes\";\r\nimport Menu from \"../../../shared/components/Menu\";\r\nimport Avatar from \"../editPage/avatar/Avatar\";\r\nimport PhoneForm from \"../editPage/phone/PhoneForm\";\r\nimport AttachmentsForm from \"../editPage/attachments/AttachmentsForm\";\r\nimport {ContactInterface} from \"../../contactList/types/contact.interface\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport {KeyboardDatePicker} from \"@material-ui/pickers\";\r\nimport {formatDate} from \"../../../utils/utils\";\r\n\r\nconst AddPage: FC = () => {\r\n    const classes = useStylesAddPage()\r\n    const history = useHistory()\r\n\r\n    const [errors, setError] = useState({\r\n        name: '',\r\n        surname: '',\r\n        patronymic: '',\r\n    })\r\n\r\n    const {addContact, logOut} = useActions()\r\n\r\n    const [contactInfo, setContactInfo] = useState({} as ContactInterface)\r\n    const [contactAddress, setContactAddress] = useState({})\r\n    const [gender, setGender] = useState('')\r\n    const [logo, setLogo] = useState({})\r\n    const [newPhones, setNewPhones] = useState([])\r\n    const [newAttachments, setNewAttachments] = useState([])\r\n\r\n    const [selectedDate, setSelectedDate] = React.useState<Date | null>(\r\n        new Date(''),\r\n    );\r\n\r\n    const handleDateChange = (date: Date | null) => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const changeContactInfoHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const target: TargetType = (event.target)\r\n        const isDate = target.name === 'birthDate'\r\n        const replaceStr = event.target.value.replace(/-/g, ' ').split(' ').reverse().join('.')\r\n        setContactInfo({\r\n            ...contactInfo,\r\n            [target.name]: isDate ? replaceStr : target.value,\r\n        })\r\n    }\r\n\r\n    const changeContactAddressHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const target: TargetType = (event.target)\r\n\r\n        setContactAddress({\r\n            ...contactAddress,\r\n            [target.name]: target.value,\r\n        })\r\n    }\r\n\r\n    const ChangeGender = (event: any) => {\r\n        setGender(event.target.value as string);\r\n    };\r\n\r\n    const exitClickHandler = () => {\r\n        logOut()\r\n    }\r\n    const birthDate = formatDate(selectedDate, 'DD.MM.yyyy')\r\n\r\n    const onSubmit = () => {\r\n        const contact = {\r\n            contact: {\r\n                ...contactInfo,\r\n                address: contactAddress,\r\n                birthDate: birthDate,\r\n                gender: gender,\r\n                logo: logo,\r\n                phones: newPhones,\r\n                attachments: newAttachments\r\n            }\r\n        }\r\n        addContact(contact)\r\n        history.push(PATH.HOME)\r\n    }\r\n\r\n    const validation = (event: React.FocusEvent<HTMLInputElement>) => {\r\n        const target = event.target\r\n        const regexRange = /^[а-яА-Яб,0-9]{3,10}$/;\r\n        if (target.name === 'name') {\r\n            if (!regexRange.test(target.value)) {\r\n                setError({...errors, name: 'Поле запонено неверно'})\r\n            } else if (regexRange.test(target.value)) {\r\n                setError({...errors, name: ''})\r\n            }\r\n        }\r\n        if (target.name === 'surname') {\r\n            if (!regexRange.test(target.value)) {\r\n                setError({...errors, surname: 'Поле запонено неверно'})\r\n            } else if (regexRange.test(target.value)) {\r\n                setError({...errors, surname: ''})\r\n            }\r\n        }\r\n        if (target.name === 'patronymic') {\r\n            if (!regexRange.test(target.value)) {\r\n                setError({...errors, patronymic: 'Поле запонено неверно'})\r\n            } else if (regexRange.test(target.value)) {\r\n                setError({...errors, patronymic: ''})\r\n            }\r\n        }\r\n        return errors\r\n    }\r\n\r\n    return (\r\n        <div className={classes.addPageBG}>\r\n            <Menu auth={'Выйти'} exitClickHandler={exitClickHandler}/>\r\n            <div className={classes.container}>\r\n                <IconButton className={classes.prevButton}\r\n                            onClick={() => history.push(PATH.HOME)}\r\n                            aria-label=\"close\">\r\n                    <ArrowBackIcon/>\r\n                </IconButton>\r\n                <div className={classes.avatar}><Avatar setLogo={setLogo} contact={contactInfo}/></div>\r\n                <div className={classes.addPageWrapper}>\r\n                    <h2 className={classes.title}>Добавление нового контакта</h2>\r\n                    <Grid container justifyContent=\"center\">\r\n                        <Grid item xs={10}>\r\n                            <form onSubmit={onSubmit}>\r\n                                <FormControl className={classes.form}>\r\n                                    <FormGroup className={classes.row}>\r\n                                        <div>\r\n                                            <div className={classes.period}>\r\n                                                <div>\r\n                                                    <TextField className={classes.input}\r\n                                                               title={'Используйте русский язык и цифры'}\r\n                                                               label=\"Имя\"\r\n                                                               name={\"name\"}\r\n                                                               type=\"search\"\r\n                                                               onBlur={validation}\r\n                                                               onChange={changeContactInfoHandler}\r\n                                                    />\r\n                                                    {errors.name ?\r\n                                                        <div className={classes.error}>{errors.name}</div> : null}\r\n                                                </div>\r\n                                                <div>\r\n                                                    <TextField className={classes.input}\r\n                                                               title={'Используйте русский язык и цифры'}\r\n                                                               label=\"Фамилия\"\r\n                                                               name={\"surname\"}\r\n                                                               type=\"search\"\r\n                                                               onBlur={validation}\r\n                                                               onChange={changeContactInfoHandler}\r\n                                                    />\r\n                                                    {errors.surname ?\r\n                                                        <div className={classes.error}>{errors.surname}</div> : null}\r\n                                                </div>\r\n                                                <div>\r\n                                                    <TextField className={classes.input}\r\n                                                               title={'Используйте русский язык и цифры'}\r\n                                                               label=\"Отчество\"\r\n                                                               name={\"patronymic\"}\r\n                                                               type=\"search\"\r\n                                                               onBlur={validation}\r\n                                                               onChange={changeContactInfoHandler}\r\n                                                    />\r\n                                                    {errors.patronymic ?\r\n                                                        <div className={classes.error}>{errors.patronymic}</div> : null}\r\n                                                </div>\r\n                                                <FormControl className={classes.gender}>\r\n                                                    <InputLabel id=\"demo-simple-select-label\">Пол</InputLabel>\r\n                                                    <Select\r\n                                                        labelId=\"demo-simple-select-label\"\r\n                                                        id=\"demo-simple-select\"\r\n                                                        value={gender}\r\n                                                        onChange={ChangeGender}\r\n                                                    >\r\n                                                        <MenuItem value={''}/>\r\n                                                        <MenuItem value={'мужской'}>Мужской</MenuItem>\r\n                                                        <MenuItem value={'женский'}>Женский</MenuItem>\r\n                                                    </Select>\r\n                                                </FormControl>\r\n\r\n\r\n                                                <TextField className={classes.input}\r\n                                                           label=\"Семейное положение\"\r\n                                                           name={\"maritalStatus\"}\r\n                                                           type=\"search\"\r\n                                                           onChange={changeContactInfoHandler}\r\n                                                />\r\n                                                <TextField className={classes.input}\r\n                                                           label=\"Гражданство\"\r\n                                                           name={\"nationality\"}\r\n                                                           type=\"search\"\r\n                                                           onChange={changeContactInfoHandler}\r\n                                                />\r\n                                            </div>\r\n                                            <div className={classes.dateWrapper}>\r\n                                                <div>\r\n                                                    <h3 className={classes.title}>Возраст</h3>\r\n                                                </div>\r\n                                                <div className={classes.period}>\r\n                                                            <KeyboardDatePicker\r\n                                                                margin=\"normal\"\r\n                                                                id=\"date-picker-dialog\"\r\n                                                                format=\"dd.MM.yyyy\"\r\n                                                                helperText=\"Дата рождения\"\r\n                                                                value={selectedDate}\r\n                                                                onChange={handleDateChange}\r\n                                                                KeyboardButtonProps={{\r\n                                                                    'aria-label': 'change date',\r\n                                                                }}\r\n                                                                error={false}\r\n                                                            />\r\n                                                </div>\r\n                                            </div>\r\n                                            <div>\r\n                                                <h3 className={classes.title}>Адрес</h3>\r\n                                                <div className={classes.addressWrapper}>\r\n                                                    <br/><TextField className={classes.input}\r\n                                                                    label=\"Страна\"\r\n                                                                    name={\"country\"}\r\n                                                                    type=\"search\"\r\n                                                                    onChange={changeContactAddressHandler}\r\n                                                />\r\n                                                    <TextField className={classes.input}\r\n                                                               label=\"Город\"\r\n                                                               name={\"city\"}\r\n                                                               type=\"search\"\r\n                                                               onChange={changeContactAddressHandler}\r\n                                                    />\r\n                                                    <TextField className={classes.input}\r\n                                                               label=\"Улица\"\r\n                                                               name={\"street\"}\r\n                                                               type=\"search\"\r\n                                                               onChange={changeContactAddressHandler}\r\n                                                    />\r\n                                                    <TextField className={classes.input}\r\n                                                               label=\"Номер дома\"\r\n                                                               name={\"building\"}\r\n                                                               type=\"number\"\r\n                                                               onChange={changeContactAddressHandler}\r\n                                                    />\r\n                                                    <TextField className={classes.input}\r\n                                                               label=\"Номер квартиры\"\r\n                                                               name={\"flat\"}\r\n                                                               type=\"number\"\r\n                                                               onChange={changeContactAddressHandler}\r\n                                                    />\r\n                                                    <TextField className={classes.input}\r\n                                                               label=\"Индекс\"\r\n                                                               name={\"zipCode\"}\r\n                                                               type=\"number\"\r\n                                                               onChange={changeContactAddressHandler}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                        </div>\r\n\r\n                                        <PhoneForm setNewPhones={setNewPhones} newPhones={newPhones} contact={contactInfo}/>\r\n                                        <AttachmentsForm contact={contactInfo} newAttachments={newAttachments} setNewAttachments={setNewAttachments}/>\r\n\r\n                                        <div className={classes.buttonWrapper}>\r\n                                            <Button\r\n                                                className={classes.editButton}\r\n                                                type={'submit'}\r\n                                                variant={'contained'}\r\n                                                color={'primary'}\r\n                                            >Сохранить изменения</Button>\r\n\r\n                                        </div>\r\n                                    </FormGroup>\r\n                                </FormControl>\r\n                            </form>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddPage;\r\n","import {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {createStyles} from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        buttonWrapper: {\r\n            paddingTop: 20,\r\n            display: 'flex',\r\n            justifyContent: 'space-around',\r\n        },\r\n        inputWrapper :{\r\n            width: 250,\r\n            height: 'auto',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        errorForm : {\r\n            color: 'red'\r\n        }\r\n    }),\r\n);","import React from 'react';\r\nimport {Button, FormControl, FormGroup, FormLabel, Grid, TextField} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport {useActions} from \"../../../../store/hooks/useActions\";\r\nimport {useStyles} from \"./loginStyles\";\r\nimport {LoginErrorType} from \"../../../../validation/types/LoginErrorType\";\r\nimport {useTypeSelector} from \"../../../../store/hooks/useTypeSelector\";\r\nimport {Redirect} from \"react-router\";\r\n\r\n\r\ntype LoginFormType = {\r\n    openLoginFormClickHandler: () => void\r\n}\r\n\r\nconst LoginForm = (props: LoginFormType) => {\r\n    const styles = useStyles()\r\n\r\n    const {getLogin} = useActions()\r\n\r\n    const isSuccess = useTypeSelector(state => state.login.isSuccess)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n\r\n            const errors: LoginErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email обязателен';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Неверный email адрес';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Пароль обязателен';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            getLogin(values.email, values.password)\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isSuccess) {\r\n        return <Redirect to={'/contacts'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid container justifyContent=\"center\">\r\n                <Grid item xs={12}>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormControl>\r\n                            <FormGroup>\r\n                                <div className={styles.inputWrapper}>\r\n                                    <TextField\r\n                                        type=\"search\"\r\n                                        label=\"Email\"\r\n                                        margin=\"normal\"\r\n                                        {...formik.getFieldProps(\"email\")}\r\n                                    />\r\n                                    {formik.errors.email ?\r\n                                        <div className={styles.errorForm}>{formik.errors.email}</div> : null}\r\n                                    <TextField\r\n                                        type=\"password\"\r\n                                        label=\"Password\"\r\n                                        margin=\"normal\"\r\n                                        {...formik.getFieldProps(\"password\")}\r\n                                    />\r\n                                </div>\r\n                                {formik.errors.password ?\r\n                                    <div className={styles.errorForm}>{formik.errors.password}</div> : null}\r\n                                <div className={styles.buttonWrapper}>\r\n                                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                                    <Button variant={'contained'} color={'primary'}\r\n                                            onClick={props.openLoginFormClickHandler}>Cancel</Button>\r\n                                </div>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginForm;","import React, {SyntheticEvent} from 'react';\r\nimport style from './mainPage.module.scss'\r\nimport LoginForm from \"./loginForm/LoginForm\";\r\nimport Menu from \"../../../shared/components/Menu\";\r\n\r\nconst MainPage = () => {\r\n\r\n    const [openLogin, setOpenLogin] = React.useState(false);\r\n\r\n    const openLoginFormClickHandler = () => {\r\n        setOpenLogin(false)\r\n    }\r\n\r\n    const loginClickHandler = (event: SyntheticEvent) => {\r\n        if (event.currentTarget) {\r\n            setOpenLogin(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.wrapper}>\r\n            <div className={style.root}>\r\n                <Menu loginClickHandler={loginClickHandler} auth='Login'/>\r\n            </div>\r\n            <div>\r\n                <h1 className={style.title}>Книга Контактов</h1>\r\n            </div>\r\n            <div className={style.footer}>\r\n                <span className={style.footerTitle}>by Egor Dupanov (Bostil Support)</span>\r\n            </div>\r\n\r\n            {openLogin ? <LoginForm openLoginFormClickHandler={openLoginFormClickHandler}/> : null}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainPage;","import {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {createStyles} from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        emailWrapper: {\r\n            height: '100%',\r\n            background: 'whitesmoke'\r\n        },\r\n        formControl: {\r\n            margin: 5,\r\n            position: 'relative',\r\n            minWidth: 120,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            width: '50%'\r\n\r\n        },\r\n        container: {\r\n            maxWidth: 1200,\r\n            margin: '10% auto',\r\n            background: '#ffffff',\r\n\r\n        },\r\n        emailFormWrapper: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            boxShadow: 'rgba(149, 157, 165, 0.2) 0px 8px 24px',\r\n        },\r\n        inputStyle: {\r\n            margin: 5,\r\n            width: '50%'\r\n        },\r\n        titleTemplate: {\r\n            position: 'absolute',\r\n            left: 15,\r\n            transition: ' color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms',\r\n            '&:focus': {},\r\n        },\r\n        templateText: {\r\n            marginRight: '24px !important',\r\n        },\r\n        select: {\r\n            marginTop: '0 !important',\r\n            paddingLeft: 14,\r\n\r\n            border: '1px solid black',\r\n            borderRadius: '4px',\r\n            borderColor: '#c4c4c4',\r\n            width: '100%',\r\n            height: 60,\r\n            '&:hover': {\r\n                borderColor: 'black',\r\n                borderBottom: 'none'\r\n            },\r\n            '&::before': {\r\n                borderBottom: 'none'\r\n            },\r\n            '&::after': {\r\n                borderBottom: 'none'\r\n            }\r\n\r\n        },\r\n        emailButton: {\r\n            marginTop: 10,\r\n            marginBottom: 20\r\n        },\r\n\r\n    }),\r\n);","export const messageTemplate = {\r\n    template1:`\r\n       Пусть хорошее случается,\r\n       Пусть приходят чудеса,\r\n       И мечты все исполняются.\r\n       С Новым годом всех! Ура!`,\r\n\r\n    template2: 'Тебе желаю море счастья,\\n' +\r\n        'Улыбок, солнца и тепла.\\n' +\r\n        'Чтоб жизнь была еще прекрасней,\\n' +\r\n        'Удача за руку вела!\\n' +\r\n        '\\n' +\r\n        'Пусть в доме будет только радость,\\n' +\r\n        'Уют, достаток и покой.\\n' +\r\n        'Друзья, родные будут рядом,\\n' +\r\n        'Беда обходит стороной!\\n' +\r\n        '\\n' +\r\n        'Здоровья крепкого желаю\\n' +\r\n        'И легких жизненных дорог.\\n' +\r\n        'И пусть всегда, благословляя,\\n' +\r\n        'Тебя хранит твой ангелок!',\r\n    template3: 'Поздравляю с днем рождения! Пусть жизнь дарит тебе побольше ярких моментов и сбудутся все твои самые смелые и заветные желания! Желаю, чтобы в твоем доме всегда царили счастье и понимание. И пусть тебя окружают только искренние, верные, надежные друзья и добрые люди!\\n',\r\n}","import TextField from '@material-ui/core/TextField';\r\nimport React, {ChangeEvent, useState} from 'react';\r\nimport {Button, FormControl, IconButton, InputLabel, NativeSelect} from \"@material-ui/core\";\r\nimport {useStyles} from \"./styles/emailStyles\";\r\nimport {ContactInterface} from \"../../contactList/types/contact.interface\";\r\nimport {TargetType} from \"../searchPage/SearchPage\";\r\nimport {EmailInterface} from \"./types/email.interface\";\r\nimport {useActions} from \"../../../store/hooks/useActions\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {PATH} from \"../../../routes/Routes\";\r\nimport {messageTemplate} from \"./messageTemplates\";\r\nimport Menu from \"../../../shared/components/Menu\";\r\n\r\nconst EmailPage = () => {\r\n    const history = useHistory()\r\n    const classes = useStyles();\r\n\r\n    const {sendMail, logOut} = useActions()\r\n    let [email, setEmail] = useState({} as EmailInterface)\r\n    const contactsId = JSON.parse(sessionStorage.getItem('contactsId') || '[]');\r\n    const contacts = JSON.parse(sessionStorage.getItem('contacts') || '[]');\r\n    const [template, setTemplate] = React.useState<{ name: string }>({name: ''});\r\n\r\n    const findEqualObjects = (someArray: any, otherArray: any) => {\r\n        let equalObjects: ContactInterface[] = [];\r\n        someArray.forEach((i: ContactInterface) => {\r\n            otherArray.forEach((j: string) => {\r\n                if (i.id === j) {\r\n                    equalObjects.push(i);\r\n                }\r\n            });\r\n        });\r\n\r\n        return equalObjects;\r\n    }\r\n    const currentContacts = findEqualObjects(contacts, contactsId)\r\n    // имена выбранных пользователей для поля кому\r\n    const valueContact = currentContacts.map(el => `${el.name} ${el.surname}`).join(', ')\r\n    // email выбранных пользователей\r\n    const emails = currentContacts.map(el => `${el.email}`)\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ name: string; value: unknown }>) => {\r\n        const text = event.target.name;\r\n        setTemplate({\r\n            ...template,\r\n            [text]: event.target.value,\r\n        });\r\n        // @ts-ignore\r\n        setEmail({...email, text: event.target.value})\r\n    };\r\n    const changeMailHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const target: TargetType = (event.target)\r\n        if (email) {\r\n            email = {...email, [target.name]: target.value}\r\n        }\r\n        setTemplate({...template, name: target.value})\r\n        setEmail(email)\r\n    }\r\n\r\n    const sendMailHandler = () => {\r\n        sendMail(emails, email.theme, email.text)\r\n    }\r\n\r\n    const exitClickHandler = () => {\r\n        logOut()\r\n    }\r\n\r\n    return (\r\n        <div className={classes.emailWrapper}>\r\n            <Menu auth={'Выйти'} exitClickHandler={exitClickHandler}/>\r\n            <div className={classes.container}>\r\n                <IconButton\r\n                    onClick={() => history.push(PATH.HOME)}\r\n                    aria-label=\"close\">\r\n                    <ArrowBackIcon/>\r\n                </IconButton>\r\n                <form noValidate autoComplete=\"off\" className={classes.emailFormWrapper}>\r\n                    <TextField className={classes.inputStyle}\r\n                               id=\"outlined-textarea\"\r\n                               label=\"Кому\"\r\n                               multiline\r\n                               variant=\"outlined\"\r\n                               defaultValue={valueContact}\r\n                               InputProps={{\r\n                                   readOnly: true,\r\n                               }}\r\n                    />\r\n                    <TextField className={classes.inputStyle}\r\n                               required\r\n                               id=\"outlined-required\"\r\n                               label=\"Тема\"\r\n                               name={'theme'}\r\n                               variant=\"outlined\"\r\n                               onChange={changeMailHandler}\r\n\r\n                    />\r\n                    <FormControl className={classes.formControl}>\r\n                        <InputLabel htmlFor=\"name-native-error\" className={classes.titleTemplate}>Шаблон</InputLabel>\r\n                        <NativeSelect\r\n                            className={classes.select}\r\n                            value={template.name}\r\n                            onChange={handleChange}\r\n                            name=\"name\"\r\n                            inputProps={{\r\n                                id: 'name-native-error',\r\n                            }}\r\n                        >\r\n                            <option aria-label=\"None\" value=\"\"/>\r\n                            <optgroup label=\"С Новым Годом!\">\r\n                                <option value={messageTemplate.template1}>Шаблон1</option>\r\n                            </optgroup>\r\n                            <optgroup label=\"С днем Рождения!\">\r\n                                <option value={messageTemplate.template2}>Шаблон2</option>\r\n                                <option value={messageTemplate.template3}>Шаблон3</option>\r\n                            </optgroup>\r\n                        </NativeSelect>\r\n                    </FormControl>\r\n                    <TextField className={classes.inputStyle}\r\n                               autoFocus\r\n                               id=\"outlined-textarea\"\r\n                               label={template.name !== '' ? '' : \"Текст сообщения\"}\r\n                               name={'text'}\r\n                               multiline\r\n                               variant=\"outlined\"\r\n                               onChange={changeMailHandler}\r\n                               value={email.text}\r\n                    />\r\n                    <Button\r\n                        className={classes.emailButton}\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        onClick={sendMailHandler}\r\n                    >\r\n                        Отправить e-mail\r\n                    </Button>\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmailPage;","import React, {SyntheticEvent} from 'react';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport {useStylesModal} from \"./style/styleModal\";\r\nimport {GridRowId} from \"@material-ui/data-grid\";\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport {useActions} from \"../../../store/hooks/useActions\";\r\n\r\ntype DeleteType = {\r\n    open: boolean,\r\n    onClose: () => void,\r\n    selectionModel: GridRowId[]\r\n    deleteContact: (event: SyntheticEvent)=> void\r\n}\r\n\r\nexport default function DeleteModal(props: DeleteType) {\r\n\r\n    const {deleteContacts, deleteAll} =useActions()\r\n    const {open, onClose, selectionModel} = props\r\n\r\n    const classes = useStylesModal();\r\n    const deleteContact = () => {\r\n        if(selectionModel.length >= 5) {\r\n            deleteAll()\r\n            onClose()\r\n        }\r\n        if (selectionModel.length < 5) {\r\n            deleteContacts(selectionModel)\r\n            onClose()\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={onClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <div className={classes.paper}>\r\n                        <h2 className={classes.modalTitle} id=\"transition-modal-title\">Вы действительно хотите удалить выбранные контакты?</h2>\r\n                        <Button\r\n                            // className={classes.}\r\n                            onClick={ deleteContact}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                        >\r\n                            <Typography variant=\"button\" style={{fontSize: '0.79rem'}}>\r\n                                Удалить\r\n                            </Typography>\r\n                        </Button>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n","import {makeStyles} from \"@material-ui/core\";\r\n\r\nexport const useStylesSearchPage = makeStyles({\r\n    avatar: {\r\n        width: 300\r\n    },\r\n    close: {\r\n        textDecoration: \"none\",\r\n        position: \"fixed\",\r\n        top: 160,\r\n        right: 50,\r\n        border: '1px solid black'\r\n    },\r\n\r\n    errorTitle: {\r\n        fontSize: '1.5em',\r\n        textAlign: \"center\",\r\n        color: \"red\",\r\n        margin: '0 auto',\r\n        padding: '20px 0'\r\n    },\r\n    searchPanel: {\r\n        marginBottom: 30\r\n    },\r\n\r\n    editForm: {\r\n        display: \"flex\",\r\n\r\n    },\r\n    searchWrapper:{\r\n        maxWidth: '100%',\r\n        flexBasis: '100%'\r\n    },\r\n    form: {\r\n        maxWidth: 1200,\r\n\r\n        width: '100%',\r\n        boxShadow: 'rgba(149, 157, 165, 0.2) 0px 8px 24px',\r\n    },\r\n    searchTable: {\r\n        maxWidth: 1000,\r\n        margin: '0 auto'\r\n    },\r\n    row: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\"\r\n    },\r\n    title: {\r\n        padding: 20,\r\n        fontSize: 28,\r\n        textAlign: \"center\",\r\n        color: \"#3451b9\",\r\n        fontFamily: 'Sans-Serif',\r\n    },\r\n    delInfoInput: {\r\n        position: \"relative\",\r\n        left: 0,\r\n        fontFamily: 'Sans-Serif',\r\n        fontSize:12,\r\n        fontWeight: 'bold',\r\n        cursor: 'pointer'\r\n\r\n    },\r\n    wrapperInput: {\r\n        padding: '10px 0',\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\"\r\n    },\r\n    input: {\r\n        margin: '0 10px 10px',\r\n    },\r\n    contactInfo: {\r\n        display: \"flex\",\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around'\r\n\r\n    },\r\n    dateWrapper: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        flexDirection: \"column\"\r\n    },\r\n    date: {\r\n        margin: '0 10px 10px 10px',\r\n        width: 195\r\n    },\r\n    period: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        flexWrap: \"wrap\"\r\n    },\r\n    addressWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n    },\r\n    buttonWrapper: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-around\",\r\n        marginTop: 20,\r\n        marginBottom: 20\r\n    },\r\n    button: {\r\n        padding: 0\r\n    },\r\n    prevButton: {textDecoration: 'none'},\r\n    editButton: {padding: 10, margin: 20},\r\n\r\n    submitButton: {\r\n        position: \"relative\",\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        margin: 80\r\n    },\r\n    wrapperButtonEditPage: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\"\r\n    },\r\n    buttonEditForm: {\r\n        margin: 20\r\n    },\r\n})\r\n","import React, {ChangeEvent, FormEvent, useEffect, useState} from 'react';\r\nimport {Button, FormControl, FormGroup, Grid, TextField} from \"@material-ui/core\";\r\nimport {useActions} from \"../../../store/hooks/useActions\";\r\nimport {useStylesSearchPage} from \"./styles/styles\";\r\nimport {SearchParamsInterface} from \"./types/searcParams.interface\";\r\nimport {KeyboardDatePicker} from \"@material-ui/pickers\";\r\nimport {formatDate} from \"../../../utils/utils\";\r\nimport {MaterialUiPickersDate} from \"@material-ui/pickers/typings/date\";\r\n\r\nexport type TargetType = {\r\n    name: string\r\n    value: string\r\n}\r\n\r\ntype SearchPanelType = {\r\n    searchClickHandlerClose: () => void\r\n}\r\n\r\nconst SearchPanel = (props: SearchPanelType) => {\r\n    const classes = useStylesSearchPage()\r\n    const {getContacts, setSearchParams, setPage} = useActions()\r\n    const savedSearch = JSON.parse(sessionStorage.getItem('search') || '{}');\r\n    const [search, setSearch] = useState(savedSearch || {} as SearchParamsInterface)\r\n    const [dateFrom, setDateFrom] = useState<MaterialUiPickersDate>(null);\r\n    const [dateTo, setDateTo] = useState<MaterialUiPickersDate>(null);\r\n\r\n    const changeContactInfoHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const target: TargetType = (event.target)\r\n        const isDate = target.name === 'dateFrom' || target.name === 'dateTo'\r\n        let replaceStr\r\n        if (isDate && target.value.length === 10) {\r\n            replaceStr = formatDate(target.value, 'DD.MM.yyyy')\r\n        }\r\n\r\n        setSearch({\r\n            ...search,\r\n            [target.name]: isDate ? replaceStr : target.value,\r\n        })\r\n    }\r\n\r\n    const handleDateFromChange = (date: Date | null) => {\r\n        setDateFrom(date);\r\n        const newDate = formatDate(date, 'DD.MM.yyyy')\r\n        setSearch({...search, dateFrom: newDate})\r\n    };\r\n    const handleDateToChange = (date: Date | null) => {\r\n        setDateTo(date);\r\n        const newDate = formatDate(date, 'DD.MM.yyyy')\r\n        setSearch({...search, dateTo: newDate})\r\n    };\r\n\r\n    const onSubmit = (event: FormEvent) => {\r\n        event.preventDefault()\r\n        sessionStorage.setItem('search', JSON.stringify(search));\r\n        setPage(1)\r\n        setSearchParams(search)\r\n        getContacts()\r\n    }\r\n\r\n    const discharge = () => {\r\n        sessionStorage.clear()\r\n        setSearch({})\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (search.dateFrom) {\r\n            setDateFrom(new Date(search.dateFrom))\r\n        }\r\n        if (search.dateTo) {\r\n            setDateTo(new Date(search.dateTo))\r\n        }\r\n    }, [search])\r\n\r\n    return (\r\n        <div className={classes.searchPanel}>\r\n            <Grid container justifyContent=\"center\">\r\n                <Grid item xs={10} className={classes.searchWrapper}>\r\n                    <form onSubmit={onSubmit}>\r\n                        <FormControl className={classes.form}>\r\n                            <FormGroup className={classes.row}>\r\n                                <h2 className={classes.title}>Поиск контакта</h2>\r\n                                <div className={classes.searchTable}>\r\n                                    <div className={classes.period}>\r\n                                        <TextField className={classes.input}\r\n                                                   label=\"Имя\"\r\n                                                   name={\"name\"}\r\n                                                   type=\"search\"\r\n                                                   onChange={changeContactInfoHandler}\r\n                                                   defaultValue={savedSearch.name}\r\n                                        />\r\n                                        <TextField className={classes.input}\r\n                                                   label=\"Фамилия\"\r\n                                                   name={\"surname\"}\r\n                                                   type=\"search\"\r\n                                                   onChange={changeContactInfoHandler}\r\n                                                   defaultValue={savedSearch.surname}\r\n                                        />\r\n                                        <TextField className={classes.input}\r\n                                                   label=\"Отчество\"\r\n                                                   name={\"patronymic\"}\r\n                                                   type=\"search\"\r\n                                                   onChange={changeContactInfoHandler}\r\n                                                   defaultValue={savedSearch.patronymic}\r\n                                        />\r\n\r\n                                        <TextField className={classes.input}\r\n                                                   label=\"Пол\"\r\n                                                   name={\"gender\"}\r\n                                                   type=\"search\"\r\n                                                   onChange={changeContactInfoHandler}\r\n                                                   defaultValue={savedSearch.gender}\r\n                                        />\r\n                                        <TextField className={classes.input}\r\n                                                   label=\"Семейное положение\"\r\n                                                   name={\"maritalStatus\"}\r\n                                                   type=\"search\"\r\n                                                   onChange={changeContactInfoHandler}\r\n                                                   defaultValue={savedSearch.maritalStatus}\r\n                                        />\r\n                                        <TextField className={classes.input}\r\n                                                   label=\"Гражданство\"\r\n                                                   name={\"nationality\"}\r\n                                                   type=\"search\"\r\n                                                   onChange={changeContactInfoHandler}\r\n                                                   defaultValue={savedSearch.nationality}\r\n                                        />\r\n                                        <TextField className={classes.input}\r\n                                                   label=\"Email\"\r\n                                                   name={\"email\"}\r\n                                                   type=\"search\"\r\n                                                   onChange={changeContactInfoHandler}\r\n                                                   defaultValue={savedSearch.email}\r\n                                        />\r\n                                        <TextField className={classes.input}\r\n                                                   label=\"Место работы\"\r\n                                                   name={\"currentJob\"}\r\n                                                   type=\"search\"\r\n                                                   onChange={changeContactInfoHandler}\r\n                                                   defaultValue={savedSearch.currentJob}\r\n                                        />\r\n                                    </div>\r\n                                    <div className={classes.dateWrapper}>\r\n                                        <div>\r\n                                            <h3 className={classes.title}>Возраст</h3>\r\n                                        </div>\r\n                                        <div className={classes.period}>\r\n                                            <KeyboardDatePicker\r\n                                                name={\"dateFrom\"}\r\n                                                helperText=\"С\"\r\n                                                className={classes.date}\r\n                                                margin=\"normal\"\r\n                                                id=\"date-picker-dialog\"\r\n                                                format=\"dd.MM.yyyy\"\r\n                                                value={formatDate(dateFrom, 'DD.MM.yyyy')}\r\n                                                onChange={handleDateFromChange}\r\n                                                onInput={changeContactInfoHandler}\r\n                                                KeyboardButtonProps={{\r\n                                                    'aria-label': 'change date',\r\n                                                }}\r\n                                                error={false}\r\n                                            />\r\n                                            <KeyboardDatePicker\r\n                                                name={\"dateTo\"}\r\n                                                helperText=\"По\"\r\n                                                className={classes.date}\r\n                                                margin=\"normal\"\r\n                                                id=\"date-picker-dialog\"\r\n                                                format=\"dd.MM.yyyy\"\r\n                                                value={formatDate(dateTo, 'DD.MM.yyyy')}\r\n                                                onChange={handleDateToChange}\r\n                                                onInput={changeContactInfoHandler}\r\n                                                KeyboardButtonProps={{\r\n                                                    'aria-label': 'change date',\r\n                                                }}\r\n                                                error={false}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <h3 className={classes.title}>Адрес</h3>\r\n                                    <div className={classes.addressWrapper}>\r\n                                        <TextField className={classes.input}\r\n                                                   label=\"Страна\"\r\n                                                   name={\"country\"}\r\n                                                   type=\"search\"\r\n                                                   onChange={changeContactInfoHandler}\r\n                                                   defaultValue={savedSearch.country}\r\n                                        />\r\n                                        <TextField className={classes.input}\r\n                                                   label=\"Город\"\r\n                                                   name={\"city\"}\r\n                                                   type=\"search\"\r\n                                                   onChange={changeContactInfoHandler}\r\n                                                   defaultValue={savedSearch.city}\r\n                                        />\r\n                                        <TextField className={classes.input}\r\n                                                   label=\"Улица\"\r\n                                                   name={\"street\"}\r\n                                                   type=\"search\"\r\n                                                   onChange={changeContactInfoHandler}\r\n                                                   defaultValue={savedSearch.street}\r\n\r\n                                        />\r\n                                        <TextField className={classes.input}\r\n                                                   label=\"Номер дома\"\r\n                                                   name={\"building\"}\r\n                                                   type=\"number\"\r\n                                                   onChange={changeContactInfoHandler}\r\n                                                   defaultValue={savedSearch.building}\r\n\r\n                                        />\r\n                                        <TextField className={classes.input}\r\n                                                   label=\"Номер квартиры\"\r\n                                                   name={\"flat\"}\r\n                                                   type=\"number\"\r\n                                                   onChange={changeContactInfoHandler}\r\n                                                   defaultValue={savedSearch.flat}\r\n                                        />\r\n                                        <TextField className={classes.input}\r\n                                                   label=\"Индекс\"\r\n                                                   name={\"zipCode\"}\r\n                                                   type=\"search\"\r\n                                                   placeholder={'6-ти значный номер'}\r\n                                                   inputProps={{pattern: \"[0-9]{6}\"}}\r\n                                                   onChange={changeContactInfoHandler}\r\n                                                   defaultValue={savedSearch.zipCode}\r\n                                        />\r\n                                    </div>\r\n\r\n                                </div>\r\n                                <div className={classes.buttonWrapper}>\r\n\r\n                                    <Button type={'submit'} variant={'contained'} color={'primary'}\r\n                                            onClick={discharge}>Сбросить</Button>\r\n                                    <Button type={'submit'} variant={'contained'} color={'primary'}\r\n                                    >Поиск</Button>\r\n                                    <Button type={'submit'} variant={'contained'} color={'primary'}\r\n                                            onClick={props.searchClickHandlerClose}>Свернуть</Button>\r\n                                </div>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchPanel;\r\n","export default __webpack_public_path__ + \"static/media/contactListBG.9b7c4cb2.jpg\";","import {makeStyles} from \"@material-ui/styles\";\r\nimport contactListBG from '../../../../assets/img/contactListBG.jpg'\r\n\r\nexport const useStylesContactList = makeStyles({\r\n        root: {\r\n            minHeight: '100%',\r\n            minWidth: '100%',\r\n            backgroundImage: `url(${contactListBG})`,\r\n            backgroundPosition: 'center',\r\n            backgroundSize: 'cover',\r\n            backgroundRepeat: 'no-repeat',\r\n            '& .column': {\r\n                backgroundColor: '#00000000',\r\n            },\r\n            '& .MuiDataGrid-cell':{\r\n                textAlign: 'center',\r\n            },\r\n        },\r\n\r\n        container: {\r\n            maxWidth: 1200,\r\n            margin: '0 auto',\r\n            padding: 15\r\n        },\r\n        headerWrapper: {\r\n            padding: '5px 0',\r\n        },\r\n    contactsForm :{\r\n        boxShadow: 'rgba(149, 157, 165, 0.2) 0px 8px 24px',\r\n    },\r\n\r\n        preloader: {\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            marginRight: '-50%',\r\n        },\r\n        deleteButton: {\r\n            margin: 10\r\n        },\r\n        searchButton: {\r\n            display: 'inline-flex',\r\n            margin: '10px 0 10px 10px !important',\r\n            a: {\r\n                textDecoration: 'none',\r\n                svg: {\r\n                    position: 'relative',\r\n                    marginLeft: 5,\r\n                    padding: '-5px',\r\n                    top: 5,\r\n                }\r\n            }\r\n        },\r\n        emailButtonText: {\r\n            fontSize: '0.79rem'\r\n        }\r\n        ,\r\n        link: {\r\n            textDecoration: 'none'\r\n        }\r\n    })\r\n;","import React, {SyntheticEvent, useEffect, useRef, useState} from 'react';\r\nimport {useActions} from \"../../store/hooks/useActions\";\r\nimport {useTypeSelector} from \"../../store/hooks/useTypeSelector\";\r\nimport {Button, CircularProgress, Grid, IconButton, Typography} from \"@material-ui/core\";\r\n\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport {ContactInterface} from \"./types/contact.interface\";\r\nimport {NavLink, useHistory} from 'react-router-dom';\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport DeleteModal from \"../pages/deleteModal/DeleteModal\";\r\nimport SearchPage from \"../pages/searchPage/SearchPage\";\r\nimport {PATH} from \"../../routes/Routes\";\r\nimport {useStylesContactList} from \"./styles/contactListStyles\";\r\nimport Menu from \"../../shared/components/Menu\";\r\nimport {DataGrid, GridCellParams, GridColDef, GridRowId, ruRU} from \"@material-ui/data-grid\";\r\n\r\nconst ContactList = () => {\r\n\r\n    const columns: GridColDef[] = [\r\n        {field: 'name', headerName: 'Имя', width: 160, filterable: false, sortable: false, hide: true},\r\n        {field: 'surname', headerName: 'Фамилия', width: 160, filterable: false, sortable: false, hide: true},\r\n        {field: 'patronymic', headerName: 'Отчество', width: 160, filterable: false, sortable: false, hide: true},\r\n        {\r\n            field: '',\r\n            headerName: 'ФИО',\r\n            width: 250,\r\n            filterable: false,\r\n            headerClassName: 'column',\r\n            headerAlign: 'center',\r\n            sortable: false,\r\n            renderCell: (params: GridCellParams) => {\r\n                return <span>{`${params.row.name} ${params.row.surname} ${params.row.patronymic}`}</span>\r\n            },\r\n        },\r\n        {\r\n            field: 'birthDate',\r\n            headerName: 'Дата рождения',\r\n            width: 170,\r\n            filterable: false,\r\n            headerClassName: 'column',\r\n            sortable: false,\r\n            headerAlign: 'center',\r\n\r\n        },\r\n        {\r\n            field: 'gender',\r\n            headerName: 'Пол',\r\n            width: 80,\r\n            filterable: false,\r\n            sortable: false,\r\n            hide: true,\r\n            headerAlign: 'center'\r\n        },\r\n        {\r\n            field: 'maritalStatus',\r\n            headerName: 'Семейное положение',\r\n            width: 200,\r\n            filterable: false,\r\n            sortable: false,\r\n            hide: true\r\n        },\r\n        {field: 'nationality', headerName: 'Гражданство', width: 140, filterable: false, sortable: false, hide: true},\r\n        {\r\n            field: 'address',\r\n            headerName: 'Адрес',\r\n            headerAlign: 'center',\r\n            headerClassName: 'column',\r\n            flex: 1,\r\n            width: 350,\r\n            filterable: false,\r\n            sortable: false,\r\n            renderCell: (params: GridCellParams) => {\r\n                return <span>{params.row.address.fullAddress}</span>\r\n            }\r\n        },\r\n        {field: 'email', headerName: 'Email', width: 140, filterable: false, sortable: false, hide: true},\r\n        {\r\n            field: 'currentJob',\r\n            headerName: 'Место работы',\r\n            width: 160,\r\n            filterable: false,\r\n            headerClassName: 'column',\r\n            sortable: false,\r\n            headerAlign: 'center',\r\n        },\r\n        {\r\n            field: 'Редактировать',\r\n            headerName: '',\r\n            width: 155,\r\n            filterable: false,\r\n            sortable: false,\r\n            editable: true,\r\n            headerClassName: 'column',\r\n            headerAlign: 'center',\r\n            renderCell: (el) => {\r\n                return <IconButton\r\n                    aria-label=\"edit\"\r\n                    id={String(el.id)}\r\n                    onClick={contactClickHandler}\r\n                >\r\n                    <NavLink to={'/contacts/edit'}>\r\n                        <EditIcon/>\r\n                    </NavLink>\r\n                </IconButton>\r\n            }\r\n        },\r\n        {\r\n            field: 'Удалить',\r\n            headerName: '',\r\n            width: 110,\r\n            filterable: false,\r\n            sortable: false,\r\n            headerAlign: 'center',\r\n            headerClassName: 'column',\r\n            renderCell: (el) =>\r\n                <IconButton\r\n                    aria-label=\"del\"\r\n                    id={String(el.id)}\r\n                    onClick={() => handleOpenModal([String(el.id)])}\r\n                >\r\n                    <Delete/>\r\n                </IconButton>\r\n        },\r\n    ];\r\n\r\n    const usePrevious = (value: any) => {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n    const classes = useStylesContactList();\r\n    const [items, setItems] = useState<ContactInterface[]>([])\r\n    const [selectionModel, setSelectionModel] = useState<GridRowId[]>([]);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [openSearch, setOpenSearch] = React.useState(false);\r\n    const {getContacts, setPage, setTake, logOut} = useActions()\r\n    const {isLoading, data, maxUsers, page, take} = useTypeSelector(state => state.contacts)\r\n    const {isDeleteLoading} = useTypeSelector(state => state.delete)\r\n\r\n    const prevVal = usePrevious(data)\r\n    const history = useHistory()\r\n    sessionStorage.setItem('contactsId', JSON.stringify(selectionModel));\r\n    sessionStorage.setItem('contacts', JSON.stringify(items));\r\n\r\n    const handleOpenModal = (id: GridRowId[]) => {\r\n        setSelectionModel(id)\r\n        setOpen(true);\r\n    };\r\n    const handleCloseModal = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const updateFullAddress = (data: ContactInterface[]) => {\r\n        const updatedData = [...data]\r\n        updatedData.map((item: ContactInterface) => {\r\n            return item.address.fullAddress = `${item.address.zipCode} ${item.address.country}, г. ${item.address.city}, ул. ${item.address.street} ${item.address.building}/${item.address.flat}`\r\n        })\r\n        setItems(updatedData)\r\n    }\r\n\r\n    const handlePaginationChange = (page: number) => {\r\n        setPage(page + 1)\r\n        setTake(take)\r\n        getContacts()\r\n    };\r\n    const checkedCurrenContacts = (params: GridRowId[]) => {\r\n        setSelectionModel(params)\r\n    }\r\n\r\n    const contactClickHandler = (event: SyntheticEvent) => {\r\n        const targetID = event.currentTarget.id\r\n        const contactsForUpdate = [...data]\r\n        const currentContact: ContactInterface = contactsForUpdate.find(target => target.id === targetID);\r\n        history.push(`${PATH.EDIT}/${currentContact.id}`, {contact: currentContact})\r\n    }\r\n\r\n    const searchClickHandler = (event: SyntheticEvent) => {\r\n        if (event.currentTarget) {\r\n            setOpenSearch(true)\r\n        }\r\n    }\r\n\r\n    const searchClickHandlerClose = () => {\r\n        setOpenSearch(false)\r\n    }\r\n\r\n    const deleteContact = (event: SyntheticEvent) => {\r\n        const id = event.currentTarget.id\r\n        const checkedContacts: Array<string> = []\r\n        setSelectionModel([...checkedContacts, id])\r\n        // deleteContacts([...checkedContacts, id])\r\n        handleCloseModal()\r\n    }\r\n\r\n    const exitClickHandler = () => {\r\n        logOut()\r\n    }\r\n\r\n    useEffect(() => {\r\n        getContacts()\r\n        if (data && data.length > 0) {\r\n            updateFullAddress(data)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (data && data.length > 0) {\r\n            if (data !== prevVal) {\r\n                updateFullAddress(data)\r\n            }\r\n        } else {\r\n            setItems([])\r\n        }\r\n    }, [data])\r\n\r\n\r\n    if (isLoading || !data) {\r\n        return <CircularProgress\r\n            className={classes.preloader}\r\n            size={60}\r\n            color=\"secondary\"\r\n        />\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={classes.root}>\r\n            <Menu auth={'Выйти'} exitClickHandler={exitClickHandler}/>\r\n            <div className={classes.container}>\r\n                <Grid\r\n                    className={classes.headerWrapper}\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"space-between\"\r\n                    alignItems=\"center\"\r\n                > <NavLink className={classes.link} to={'/contacts/create'}>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                    >\r\n                        Создать новый контакт\r\n                    </Button>\r\n                </NavLink>\r\n                    <div>\r\n                        <Button\r\n                            onClick={() => handleOpenModal(selectionModel)}\r\n                            disabled={selectionModel.length === 0}\r\n                            className={classes.deleteButton}\r\n                            variant=\"outlined\"\r\n                            color=\"secondary\"\r\n                        >\r\n                            Удалить выбранные\r\n                            <Delete/>\r\n                        </Button>\r\n                            <NavLink className={classes.link} to={'/contacts/email'}>\r\n                                <Button\r\n                                    disabled={selectionModel.length === 0}\r\n                                    variant=\"contained\"\r\n                                    size=\"large\"\r\n                                    color=\"primary\"\r\n                                    target=\"_top\"\r\n                                    rel=\"noopener noreferrer\"\r\n                                    href={``}\r\n                                >\r\n                                    <Typography variant=\"button\" className={classes.emailButtonText}>\r\n                                        Отправить E-mail\r\n                                    </Typography>\r\n                                </Button>\r\n                            </NavLink>\r\n                        <Button\r\n                            onClick={searchClickHandler}\r\n                            className={classes.searchButton}\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                        >\r\n                            <SearchIcon/>\r\n                        </Button>\r\n\r\n                    </div>\r\n                </Grid>\r\n\r\n                {openSearch ? <SearchPage searchClickHandlerClose={searchClickHandlerClose}/> : null}\r\n\r\n                <DataGrid\r\n                    className={classes.contactsForm}\r\n                    rows={items}\r\n                    columns={columns}\r\n                    pageSize={take}\r\n                    page={page - 1 || 0}\r\n                    rowCount={maxUsers}\r\n                    autoHeight\r\n                    loading={isDeleteLoading}\r\n                    paginationMode={'server'}\r\n                    rowsPerPageOptions={[5, 10, 25, ] }\r\n                    onPageChange={handlePaginationChange}\r\n                    onPageSizeChange={handlePaginationChange}\r\n                    sortingMode={'server'}\r\n                    disableSelectionOnClick\r\n                    checkboxSelection\r\n                    localeText={\"props\" in ruRU ? ruRU.props.MuiDataGrid.localeText : undefined}\r\n                    onSelectionModelChange={checkedCurrenContacts}\r\n                    selectionModel={selectionModel}\r\n                />\r\n\r\n                <DeleteModal open={open}\r\n                             onClose={handleCloseModal}\r\n                             selectionModel={selectionModel}\r\n                             deleteContact={deleteContact}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactList\r\n","import React from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport EditPage from \"../components/pages/editPage/EditPage\";\r\nimport AddPage from \"../components/pages/addPage/AddPage\";\r\nimport MainPage from \"../components/pages/mainPage/MainPage\";\r\nimport EmailPage from \"../components/pages/emailPage/EmailPage\";\r\nimport ContactList from \"../components/contactList/ContactList\";\r\n\r\nexport const PATH = {\r\n    LOGIN: '/',\r\n    HOME: '/contacts',\r\n    CREATE: '/contacts/create',\r\n    EDIT: '/contacts/edit',\r\n    EMAIL: '/contacts/email'\r\n}\r\n\r\nconst Routes = () => {\r\n\r\n    return (\r\n            <Switch>\r\n                <Route exact path={PATH.LOGIN} component={MainPage}/>\r\n                <Route exact path={PATH.HOME} component={ContactList}/>\r\n                <Route exact path={PATH.CREATE} component={AddPage}/>\r\n                <Route exact path={PATH.EMAIL} component={EmailPage}/>\r\n                <Route exact path={`${PATH.EDIT}/:id`} component={EditPage}/>\r\n            </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import './App.css';\r\nimport {History} from 'history'\r\nimport {ConnectedRouter} from \"connected-react-router\";\r\nimport React, {useEffect} from \"react\";\r\nimport Routes from \"./routes/Routes\";\r\nimport {useTypeSelector} from \"./store/hooks/useTypeSelector\";\r\nimport {useActions} from \"./store/hooks/useActions\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport {ru} from \"date-fns/locale\";\r\n\r\ninterface AppHistory {\r\n    history: History\r\n}\r\n\r\nfunction App({history}: AppHistory) {\r\n    const {getContactsBirthday} = useActions()\r\n    const isSuccess = useTypeSelector(state => state.login.isSuccess)\r\n    const user = useTypeSelector(state => state.login.data)\r\n\r\n    useEffect(() => {\r\n        if(isSuccess){\r\n           getContactsBirthday(user[0].email)\r\n        }\r\n    }, [isSuccess])\r\n\r\n\r\n    return (\r\n        <ConnectedRouter history={history}>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils} locale={ru}>\r\n            <div className=\"App\">\r\n                <Routes/>\r\n            </div>\r\n            </MuiPickersUtilsProvider>\r\n\r\n        </ConnectedRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ContactActionTypes, ContactListStateInterface, ContactsActionType} from \"../actionTypes/contactListActiontypes\";\r\n\r\nconst initialState: ContactListStateInterface = {\r\n    isLoading: false,\r\n    data: null,\r\n    maxUsers: 0,\r\n    page: 1,\r\n    take: 5,\r\n    errors: {}\r\n}\r\n\r\nexport const contactsReducer = (state: ContactListStateInterface = initialState, action: ContactsActionType): ContactListStateInterface => {\r\n    switch (action.type) {\r\n        case ContactActionTypes.GET_CONTACTS:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n\r\n        case ContactActionTypes.GET_CONTACTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                data: action.payload.users,\r\n                maxUsers: action.payload.maxUsers\r\n            }\r\n\r\n        case ContactActionTypes.GET_CONTACTS_FAILURE:\r\n            return {\r\n                ...state,\r\n                errors: {}\r\n            }\r\n\r\n        case ContactActionTypes.SET_CONTACTS_PAGE:\r\n            return {\r\n                ...state,\r\n                page: action.page\r\n            }\r\n\r\n        case ContactActionTypes.SET_CONTACTS_TAKE:\r\n            return {\r\n                ...state,\r\n                take: action.take\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {LoginActionType, LoginActionTypes, LoginStateInterface} from \"../ActionTypes/loginActionTypes\";\r\n\r\nconst initialState: LoginStateInterface = {\r\n    isSuccess: false,\r\n    errors: {},\r\n    data: ''\r\n}\r\n\r\nexport const LoginReducer = (state = initialState, action: LoginActionType): LoginStateInterface => {\r\n    switch (action.type) {\r\n        case LoginActionTypes.GET_LOGIN:\r\n            return {\r\n                ...state,\r\n                isSuccess: false\r\n            }\r\n        case LoginActionTypes.GET_LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isSuccess: true,\r\n                data: action.payload\r\n            }\r\n        case LoginActionTypes.LOGOUT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isSuccess: false,\r\n            }\r\n        case LoginActionTypes.GET_LOGIN_FAILURE:\r\n            return {\r\n                ...state,\r\n                errors: action.errors\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n    SearchPageActionType,\r\n    SearchContactActionTypes,\r\n    SearchUserStateInterface\r\n} from \"../actionTypes/searchContactActionTypes\";\r\nimport {SearchParamsInterface} from \"../../types/searcParams.interface\";\r\n\r\nconst initialState: SearchUserStateInterface = {\r\n    searchParams: {} as SearchParamsInterface\r\n}\r\n\r\nexport const searchContactReducer = (state: SearchUserStateInterface = initialState, action: SearchPageActionType): SearchUserStateInterface => {\r\n    switch (action.type) {\r\n        case SearchContactActionTypes.SET_SEARCH_PARAMS:\r\n            return {\r\n                ...state,\r\n                searchParams: action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n    CreateContactActionType,\r\n    CreateUserStateInterface,\r\n    CreateContactActionTypes\r\n} from \"../actionType/addContactActionTypes\";\r\n\r\nconst initialState: CreateUserStateInterface = {\r\n    isLoading: false,\r\n    errors: {}\r\n\r\n}\r\n\r\nexport const createContactReducer = (state: CreateUserStateInterface = initialState, action: CreateContactActionType): CreateUserStateInterface => {\r\n    switch (action.type) {\r\n        case CreateContactActionTypes.CREATE_CONTACT:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        case CreateContactActionTypes.CREATE_CONTACT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: false\r\n            }\r\n        case CreateContactActionTypes.CREATE_CONTACT_FAILURE:\r\n            return {\r\n                ...state,\r\n                errors: {}\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n    UpdateContactActionType,\r\n    UpdateContactActionTypes,\r\n    UpdateContactStateInterface\r\n} from \"../actionType/updateContactActionTypes\";\r\n\r\nconst initialState: UpdateContactStateInterface = {\r\n    isLoading: false,\r\n    errors: {}\r\n\r\n}\r\n\r\nexport const updateContactReducer = (state: UpdateContactStateInterface = initialState, action: UpdateContactActionType): UpdateContactStateInterface => {\r\n    switch (action.type) {\r\n        case UpdateContactActionTypes.UPDATE_CONTACT:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        case UpdateContactActionTypes.UPDATE_CONTACT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: false\r\n            }\r\n        case UpdateContactActionTypes.UPDATE_CONTACT_FAILURE:\r\n            return {\r\n                ...state,\r\n                errors: {}\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n    DeleteContactActionType,\r\n    DeleteContactActionTypes,\r\n    DeleteContactStateInterface\r\n} from \"../actionType/deleteContactActionTypes\";\r\n\r\n\r\nconst initialState: DeleteContactStateInterface = {\r\n    isDeleteLoading: false,\r\n    errors: {}\r\n\r\n}\r\n\r\nexport const deleteContactReducer = (state: DeleteContactStateInterface = initialState, action: DeleteContactActionType): DeleteContactStateInterface => {\r\n    switch (action.type) {\r\n        case DeleteContactActionTypes.DELETE_CONTACT:\r\n            return {\r\n                ...state,\r\n                isDeleteLoading: true\r\n            }\r\n        case DeleteContactActionTypes.DELETE_CONTACT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isDeleteLoading: false\r\n            }\r\n        case DeleteContactActionTypes.DELETE_CONTACT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isDeleteLoading: false,\r\n                errors: {}\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {MailActionType, MailActionTypes, MailStateInterface} from \"../actionTypes/mailActionTypes\";\r\n\r\nconst initialState: MailStateInterface = {\r\n    isDeleteLoading: false,\r\n    errors: {}\r\n}\r\n\r\nexport const sendMailReducer = (state: MailStateInterface = initialState, action: MailActionType): MailStateInterface => {\r\n    switch (action.type) {\r\n        case MailActionTypes.SEND_MAIL:\r\n            return {\r\n                ...state,\r\n                isDeleteLoading: true\r\n            }\r\n        case MailActionTypes.SEND_MAIL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isDeleteLoading: false\r\n            }\r\n        case MailActionTypes.SEND_MAIL_FAILURE:\r\n            return {\r\n                ...state,\r\n                isDeleteLoading: false,\r\n                errors: {}\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {createBrowserHistory} from \"history\";\r\nimport {configureStore} from \"./app/store/configureStore\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nconst baseUrl = '/'\r\nconst history = createBrowserHistory({basename: baseUrl})\r\n\r\nconst store = configureStore(history)\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App history={history}/>\r\n        </BrowserRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n","import {History} from \"history\";\r\nimport thunk from \"redux-thunk\";\r\nimport {routerMiddleware} from \"connected-react-router\";\r\nimport {createRootReducer, RootState} from \"./rootReducer\";\r\nimport {applyMiddleware, createStore} from \"redux\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\n\r\nexport const configureStore = (history: History, initialState?: RootState) => {\r\n    const middleware = [\r\n        thunk,\r\n        routerMiddleware(history)\r\n    ]\r\n\r\n    const enhancers = [];\r\n    const windowIfDefined = typeof window === 'undefined' ? null : window as any; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n    if (windowIfDefined && windowIfDefined.REDUX_DEVTOOLS_EXTENSION) {\r\n        enhancers.push(windowIfDefined.REDUX_DEVTOOLS_EXTENSION());\r\n    }\r\n\r\n    const rootReducer = createRootReducer(history)\r\n\r\n    return createStore(\r\n        rootReducer,\r\n        initialState,\r\n        composeWithDevTools(applyMiddleware(...middleware), ...enhancers)\r\n    )\r\n}","import {connectRouter} from \"connected-react-router\";\r\nimport {History} from \"history\";\r\nimport {CombinedState, combineReducers} from \"redux\";\r\nimport {contactsReducer} from \"../components/contactList/store/reducers/contactsReducer\";\r\nimport {LoginReducer} from \"../components/pages/mainPage/loginForm/store/reducers/loginReducer\";\r\nimport {searchContactReducer} from \"../components/pages/searchPage/store/reducers/searchContactReducer\";\r\nimport {createContactReducer} from \"../components/pages/addPage/store/reducers/addContactReducer\";\r\nimport {updateContactReducer} from \"../components/pages/editPage/store/reducers/updateContactReducer\";\r\nimport {deleteContactReducer} from \"../components/pages/deleteModal/store/reducer/deleteContactReducer\";\r\nimport {sendMailReducer} from \"../components/pages/emailPage/store/reducers/sendMailReducer\";\r\n\r\nlet rootState = {} as CombinedState<any>\r\n\r\nexport type RootState = ReturnType<typeof rootState>\r\n\r\nexport const createRootReducer = (history: History) => {\r\n    rootState = combineReducers({\r\n        router: connectRouter(history),\r\n        contacts: contactsReducer,\r\n        login: LoginReducer,\r\n        search: searchContactReducer,\r\n        createContact: createContactReducer,\r\n        updateContact: updateContactReducer,\r\n        delete: deleteContactReducer,\r\n        sendMail: sendMailReducer,\r\n    })\r\n\r\n    return rootState\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"mainPage_wrapper__hRIZm\",\"container\":\"mainPage_container__2i5uo\",\"root\":\"mainPage_root__1eDPF\",\"link\":\"mainPage_link__3gtJl\",\"nav\":\"mainPage_nav__39Qdx\",\"navTitle\":\"mainPage_navTitle__2jWh3\",\"title\":\"mainPage_title__2fefP\",\"footer\":\"mainPage_footer__3VTRa\",\"footerTitle\":\"mainPage_footerTitle__65sCs\"};"],"sourceRoot":""}